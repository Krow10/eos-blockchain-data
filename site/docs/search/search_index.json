{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eos-blockchain-data Index Auto-generated documentation index. A full list of Eos-blockchain-data project modules. - [Block Extractors](pyfirehose/block_extractors/index.md#block-extractors) - [Async Multi Channel](pyfirehose/block_extractors/async_multi_channel.md#async-multi-channel) - [Async Optimized](pyfirehose/block_extractors/async_optimized.md#async-optimized) - [Async Single Channel](pyfirehose/block_extractors/async_single_channel.md#async-single-channel) - [Common](pyfirehose/block_extractors/common.md#common) - [Block Processors](pyfirehose/block_processors/index.md#block-processors) - [Generated](pyfirehose/proto/generated/index.md#generated) - [Tests](pyfirehose/tests/index.md#tests)","title":"Eos-blockchain-data Index"},{"location":"#eos-blockchain-data-index","text":"Auto-generated documentation index. A full list of Eos-blockchain-data project modules. - [Block Extractors](pyfirehose/block_extractors/index.md#block-extractors) - [Async Multi Channel](pyfirehose/block_extractors/async_multi_channel.md#async-multi-channel) - [Async Optimized](pyfirehose/block_extractors/async_optimized.md#async-optimized) - [Async Single Channel](pyfirehose/block_extractors/async_single_channel.md#async-single-channel) - [Common](pyfirehose/block_extractors/common.md#common) - [Block Processors](pyfirehose/block_processors/index.md#block-processors) - [Generated](pyfirehose/proto/generated/index.md#generated) - [Tests](pyfirehose/tests/index.md#tests)","title":"Eos-blockchain-data Index"},{"location":"pyfirehose/block_extractors/","text":"Block Extractors Eos-blockchain-data Index / pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules Modules Async Multi Channel Async Optimized Async Single Channel Common","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#block-extractors","text":"Eos-blockchain-data Index / pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#modules","text":"Async Multi Channel Async Optimized Async Single Channel Common","title":"Modules"},{"location":"pyfirehose/block_extractors/async_multi_channel/","text":"Async Multi Channel Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main asyncio_main Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. workload: The number of blocks to extract for each task. auto_adjust_frequency: Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency: The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, workload: int = 100, auto_adjust_frequency: bool = False, spawn_frequency: float = 0.1, **kwargs ) -> list[Message]: ...","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#async-multi-channel","text":"Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#asyncio_main","text":"Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_multi_channel/#arguments","text":"period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. workload: The number of blocks to extract for each task. auto_adjust_frequency: Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency: The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_multi_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_multi_channel/#signature","text":"async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, workload: int = 100, auto_adjust_frequency: bool = False, spawn_frequency: float = 0.1, **kwargs ) -> list[Message]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_optimized/","text":"Async Optimized Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main asyncio_main Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, **kwargs ) -> list[Message]: ...","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#async-optimized","text":"Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#asyncio_main","text":"Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_optimized/#arguments","text":"period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_optimized/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_optimized/#signature","text":"async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, **kwargs ) -> list[Message]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_single_channel/","text":"Async Single Channel Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main asyncio_main Show source in async_single_channel.py:30 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. workload: The number of blocks to extract for each task. auto_adjust_frequency: Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency: The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, workload: int = 100, auto_adjust_frequency: bool = False, spawn_frequency: float = 0.1, **kwargs ) -> list[Message]: ...","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#async-single-channel","text":"Eos-blockchain-data Index / pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#asyncio_main","text":"Show source in async_single_channel.py:30 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_single_channel/#arguments","text":"period_start: The first block number of the targeted period. period_end: The last block number of the targeted period. initial_tasks: The initial number of concurrent tasks to start for streaming blocks. workload: The number of blocks to extract for each task. auto_adjust_frequency: Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency: The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs: Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_single_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_single_channel/#signature","text":"async def asyncio_main( period_start: int, period_end: int, initial_tasks: int = 25, workload: int = 100, auto_adjust_frequency: bool = False, spawn_frequency: float = 0.1, **kwargs ) -> list[Message]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/","text":"Common Eos-blockchain-data Index / pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks get_secure_channel Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors. Yields A grpc.aio.Channel as an asynchronous context manager. Signature @asynccontextmanager async def get_secure_channel() -> Generator[grpc.aio.Channel, None, None]: ... process_blocks Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream. Arguments raw_blocks: A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor: A generator function extracting relevant data from a block. Returns A list of parsed data in the format returned by the block processor. Signature def process_blocks( raw_blocks: Sequence[Message], block_processor: Callable[[Message], dict] ) -> list[dict]: ... stream_blocks Show source in common.py:67 Return raw blocks (or parsed data) for the subset period between start and end using the provided filters. Arguments start: The stream's starting block. end: The stream's ending block. secure_channel: The gRPC secure channel (SSL/TLS) to extract block from. block_processor: Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream. Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied. Raises BlockStreamException: If an rpc error is encountered. Contains the start, end, and failed block number. Signature async def stream_blocks( start: int, end: int, secure_channel: grpc.aio.Channel, block_processor: Optional[Callable[[Message], dict]] = None, **kwargs ) -> list[Message | dict]: ...","title":"Common"},{"location":"pyfirehose/block_extractors/common/#common","text":"Eos-blockchain-data Index / pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks","title":"Common"},{"location":"pyfirehose/block_extractors/common/#get_secure_channel","text":"Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors.","title":"get_secure_channel"},{"location":"pyfirehose/block_extractors/common/#yields","text":"A grpc.aio.Channel as an asynchronous context manager.","title":"Yields"},{"location":"pyfirehose/block_extractors/common/#signature","text":"@asynccontextmanager async def get_secure_channel() -> Generator[grpc.aio.Channel, None, None]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#process_blocks","text":"Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream.","title":"process_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments","text":"raw_blocks: A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor: A generator function extracting relevant data from a block.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns","text":"A list of parsed data in the format returned by the block processor.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#signature_1","text":"def process_blocks( raw_blocks: Sequence[Message], block_processor: Callable[[Message], dict] ) -> list[dict]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#stream_blocks","text":"Show source in common.py:67 Return raw blocks (or parsed data) for the subset period between start and end using the provided filters.","title":"stream_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments_1","text":"start: The stream's starting block. end: The stream's ending block. secure_channel: The gRPC secure channel (SSL/TLS) to extract block from. block_processor: Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns_1","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#raises","text":"BlockStreamException: If an rpc error is encountered. Contains the start, end, and failed block number.","title":"Raises"},{"location":"pyfirehose/block_extractors/common/#signature_2","text":"async def stream_blocks( start: int, end: int, secure_channel: grpc.aio.Channel, block_processor: Optional[Callable[[Message], dict]] = None, **kwargs ) -> list[Message | dict]: ...","title":"Signature"},{"location":"pyfirehose/block_processors/","text":"Block Processors Eos-blockchain-data Index / pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors","title":"Block Processors"},{"location":"pyfirehose/block_processors/#block-processors","text":"Eos-blockchain-data Index / pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors","title":"Block Processors"},{"location":"pyfirehose/proto/generated/","text":"Generated Eos-blockchain-data Index / pyfirehose / proto / Generated Auto-generated documentation for pyfirehose.proto.generated module. Generated","title":"Generated"},{"location":"pyfirehose/proto/generated/#generated","text":"Eos-blockchain-data Index / pyfirehose / proto / Generated Auto-generated documentation for pyfirehose.proto.generated module. Generated","title":"Generated"},{"location":"pyfirehose/tests/","text":"Tests Eos-blockchain-data Index / pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"},{"location":"pyfirehose/tests/#tests","text":"Eos-blockchain-data Index / pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"}]}