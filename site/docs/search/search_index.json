{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyfirehose Index Auto-generated documentation index. A full list of Pyfirehose project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Module Parser Ui App Forms Generic Main Stub Config Edit Widgets Custom Input Validators Inputs Exceptions Tests Utils","title":"Pyfirehose Index"},{"location":"#pyfirehose-index","text":"Auto-generated documentation index. A full list of Pyfirehose project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Module Parser Ui App Forms Generic Main Stub Config Edit Widgets Custom Input Validators Inputs Exceptions Tests Utils","title":"Pyfirehose Index"},{"location":"pyfirehose/","text":"Pyfirehose Pyfirehose Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules Modules Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Pyfirehose"},{"location":"pyfirehose/#pyfirehose","text":"Pyfirehose Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules","title":"Pyfirehose"},{"location":"pyfirehose/#modules","text":"Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Modules"},{"location":"pyfirehose/args/","text":"Args Pyfirehose Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments check_period Show source in args.py:12 Convert the specified period argument, from an integer or a date, to a block number. Arguments arg_period - A period argument from the ArgumentParser. Returns An integer representing the corresponding block number. Raises ArgumentTypeError - If the period cannot be parsed. Signature def check_period ( arg_period : str ) -> int : ... parse_arguments Show source in args.py:35 Setup the command line interface and return the parsed arguments. Returns A Namespace object containing the parsed arguments. Signature def parse_arguments () -> argparse . Namespace : ...","title":"Args"},{"location":"pyfirehose/args/#args","text":"Pyfirehose Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments","title":"Args"},{"location":"pyfirehose/args/#check_period","text":"Show source in args.py:12 Convert the specified period argument, from an integer or a date, to a block number.","title":"check_period"},{"location":"pyfirehose/args/#arguments","text":"arg_period - A period argument from the ArgumentParser.","title":"Arguments"},{"location":"pyfirehose/args/#returns","text":"An integer representing the corresponding block number.","title":"Returns"},{"location":"pyfirehose/args/#raises","text":"ArgumentTypeError - If the period cannot be parsed.","title":"Raises"},{"location":"pyfirehose/args/#signature","text":"def check_period ( arg_period : str ) -> int : ...","title":"Signature"},{"location":"pyfirehose/args/#parse_arguments","text":"Show source in args.py:35 Setup the command line interface and return the parsed arguments.","title":"parse_arguments"},{"location":"pyfirehose/args/#returns_1","text":"A Namespace object containing the parsed arguments.","title":"Returns"},{"location":"pyfirehose/args/#signature_1","text":"def parse_arguments () -> argparse . Namespace : ...","title":"Signature"},{"location":"pyfirehose/exceptions/","text":"Exceptions Pyfirehose Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException BlockStreamException Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed. Attributes start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing. Signature class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Exceptions"},{"location":"pyfirehose/exceptions/#exceptions","text":"Pyfirehose Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException","title":"Exceptions"},{"location":"pyfirehose/exceptions/#blockstreamexception","text":"Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed.","title":"BlockStreamException"},{"location":"pyfirehose/exceptions/#attributes","text":"start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing.","title":"Attributes"},{"location":"pyfirehose/exceptions/#signature","text":"class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Signature"},{"location":"pyfirehose/module/","text":"Module Pyfirehose Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main main Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop. Signature def main () -> int : ...","title":"Module"},{"location":"pyfirehose/module/#module","text":"Pyfirehose Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main","title":"Module"},{"location":"pyfirehose/module/#main","text":"Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop.","title":"main"},{"location":"pyfirehose/module/#signature","text":"def main () -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/","text":"Utils Pyfirehose Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num filter_keys generate_proto_messages_classes get_auth_token get_current_task_name import_all_from_module patch_get_messages date_to_block_num Show source in utils.py:25 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days). Arguments date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified). Returns The block number associated with the given date time. Signature def date_to_block_num ( date : datetime , jwt : str | None = None ) -> int : ... filter_keys Show source in utils.py:81 Recursively filters the input_ dictionary based on the keys present in keys_filter . Arguments input_ - The input nested dictionary to filter. keys_filter - The nested dictionary filter matching subset of keys present in the input_ . Returns The filtered input_ as a new dict. Examples Input { 'a' : 'value' , 'b' : { 'b 1 ' : 'impor tant s tuff ' , 'b 2 ' : { 'x' : 's t op nest i n g s tuff ' , 'y' : 'keep me !' } }, 'c' : { 'c 1 ' : [ 1 , 2 , 3 ], 'c 2 ' : 'Hello' }, 'd' : [ { 'd 1 ' : 1 }, { 'd 1 ' : 2 , 'd 2 ' : 3 } ] } Filter { 'a' : True , 'b' : { 'b 1 ' : True , 'b 2 ' : { 'y' : True } }, 'c' : True , 'd' : { 'd 1 ' : True , } } Output { 'a' : 'value' , 'b' : { 'b 1 ' : 'impor tant s tuff ' , 'b 2 ' : { 'y' : 'keep me !' } }, 'c' : { 'c 1 ' : [ 1 , 2 , 3 ], 'c 2 ' : 'Hello' }, 'd' : [ { 'd 1 ' : 1 }, { 'd 1 ' : 2 } ] } Signature def filter_keys ( input_ : dict , keys_filter : dict ) -> dict : ... generate_proto_messages_classes Show source in utils.py:168 Generate a mapping of services and messages full name to their class object and populates the default descriptor pool with the loaded .proto definitions. Should only be called once for different descriptor sets. Arguments path - Path to a descriptor set file (generated from protoc --descriptor_set_out ). Returns A dictionary with pairs of message full name and the Python class object associated with it. Examples { 'dfuse.bstream.v1.BlockStream' : < class ' pyfirehose . proto . generated . dfuse . bstream . v1 . bstream_pb2_grpc . BlockStreamStub '>, 'dfuse.bstream.v1.BlockStreamV2' : < class ' pyfirehose . proto . generated . dfuse . bstream . v1 . bstream_pb2_grpc . BlockStreamV2Stub '>, 'dfuse.bstream.v1.BlockRequest' : < class ' BlockRequest '>, 'dfuse.bstream.v1.IrreversibleBlocksRequestV2' : < class ' IrreversibleBlocksRequestV2 '>, 'dfuse.bstream.v1.BlocksRequestV2' : < class ' BlocksRequestV2 '>, 'dfuse.bstream.v1.BlockResponseV2' : < class ' BlockResponseV2 '>, ... } Signature def generate_proto_messages_classes ( path : str = \"pyfirehose/proto/generated/protos.desc\" , ): ... get_auth_token Show source in utils.py:247 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use. Arguments use_cache - A boolean enabling/disabling fetching the cache for the JWT token request. Returns The JWT token or an empty string if the request failed. Signature def get_auth_token ( use_cache : bool = True ) -> str : ... get_current_task_name Show source in utils.py:283 Helper function for generating a unique task id from an asyncio task. Signature def get_current_task_name () -> str : ... import_all_from_module Show source in utils.py:292 Dynamically import all python files located in the specified module's folder. Arguments module_name - Name of the module to import files from. Returns The list of imported modules. Signature def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ... patch_get_messages Show source in utils.py:312 Gets all the messages from a specified file. This will find and resolve dependencies, failing if the descriptor pool cannot satisfy them. Arguments files - The file names to extract messages from. Returns A dictionary mapping proto names to the message classes. This will include any dependent messages as well as any messages defined in the same file as a specified message. Signature def patch_get_messages ( self , files ): ...","title":"Utils"},{"location":"pyfirehose/utils/#utils","text":"Pyfirehose Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num filter_keys generate_proto_messages_classes get_auth_token get_current_task_name import_all_from_module patch_get_messages","title":"Utils"},{"location":"pyfirehose/utils/#date_to_block_num","text":"Show source in utils.py:25 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days).","title":"date_to_block_num"},{"location":"pyfirehose/utils/#arguments","text":"date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified).","title":"Arguments"},{"location":"pyfirehose/utils/#returns","text":"The block number associated with the given date time.","title":"Returns"},{"location":"pyfirehose/utils/#signature","text":"def date_to_block_num ( date : datetime , jwt : str | None = None ) -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/#filter_keys","text":"Show source in utils.py:81 Recursively filters the input_ dictionary based on the keys present in keys_filter .","title":"filter_keys"},{"location":"pyfirehose/utils/#arguments_1","text":"input_ - The input nested dictionary to filter. keys_filter - The nested dictionary filter matching subset of keys present in the input_ .","title":"Arguments"},{"location":"pyfirehose/utils/#returns_1","text":"The filtered input_ as a new dict.","title":"Returns"},{"location":"pyfirehose/utils/#examples","text":"","title":"Examples"},{"location":"pyfirehose/utils/#input","text":"{ 'a' : 'value' , 'b' : { 'b 1 ' : 'impor tant s tuff ' , 'b 2 ' : { 'x' : 's t op nest i n g s tuff ' , 'y' : 'keep me !' } }, 'c' : { 'c 1 ' : [ 1 , 2 , 3 ], 'c 2 ' : 'Hello' }, 'd' : [ { 'd 1 ' : 1 }, { 'd 1 ' : 2 , 'd 2 ' : 3 } ] }","title":"Input"},{"location":"pyfirehose/utils/#filter","text":"{ 'a' : True , 'b' : { 'b 1 ' : True , 'b 2 ' : { 'y' : True } }, 'c' : True , 'd' : { 'd 1 ' : True , } }","title":"Filter"},{"location":"pyfirehose/utils/#output","text":"{ 'a' : 'value' , 'b' : { 'b 1 ' : 'impor tant s tuff ' , 'b 2 ' : { 'y' : 'keep me !' } }, 'c' : { 'c 1 ' : [ 1 , 2 , 3 ], 'c 2 ' : 'Hello' }, 'd' : [ { 'd 1 ' : 1 }, { 'd 1 ' : 2 } ] }","title":"Output"},{"location":"pyfirehose/utils/#signature_1","text":"def filter_keys ( input_ : dict , keys_filter : dict ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/utils/#generate_proto_messages_classes","text":"Show source in utils.py:168 Generate a mapping of services and messages full name to their class object and populates the default descriptor pool with the loaded .proto definitions. Should only be called once for different descriptor sets.","title":"generate_proto_messages_classes"},{"location":"pyfirehose/utils/#arguments_2","text":"path - Path to a descriptor set file (generated from protoc --descriptor_set_out ).","title":"Arguments"},{"location":"pyfirehose/utils/#returns_2","text":"A dictionary with pairs of message full name and the Python class object associated with it.","title":"Returns"},{"location":"pyfirehose/utils/#examples_1","text":"{ 'dfuse.bstream.v1.BlockStream' : < class ' pyfirehose . proto . generated . dfuse . bstream . v1 . bstream_pb2_grpc . BlockStreamStub '>, 'dfuse.bstream.v1.BlockStreamV2' : < class ' pyfirehose . proto . generated . dfuse . bstream . v1 . bstream_pb2_grpc . BlockStreamV2Stub '>, 'dfuse.bstream.v1.BlockRequest' : < class ' BlockRequest '>, 'dfuse.bstream.v1.IrreversibleBlocksRequestV2' : < class ' IrreversibleBlocksRequestV2 '>, 'dfuse.bstream.v1.BlocksRequestV2' : < class ' BlocksRequestV2 '>, 'dfuse.bstream.v1.BlockResponseV2' : < class ' BlockResponseV2 '>, ... }","title":"Examples"},{"location":"pyfirehose/utils/#signature_2","text":"def generate_proto_messages_classes ( path : str = \"pyfirehose/proto/generated/protos.desc\" , ): ...","title":"Signature"},{"location":"pyfirehose/utils/#get_auth_token","text":"Show source in utils.py:247 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use.","title":"get_auth_token"},{"location":"pyfirehose/utils/#arguments_3","text":"use_cache - A boolean enabling/disabling fetching the cache for the JWT token request.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_3","text":"The JWT token or an empty string if the request failed.","title":"Returns"},{"location":"pyfirehose/utils/#signature_3","text":"def get_auth_token ( use_cache : bool = True ) -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#get_current_task_name","text":"Show source in utils.py:283 Helper function for generating a unique task id from an asyncio task.","title":"get_current_task_name"},{"location":"pyfirehose/utils/#signature_4","text":"def get_current_task_name () -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#import_all_from_module","text":"Show source in utils.py:292 Dynamically import all python files located in the specified module's folder.","title":"import_all_from_module"},{"location":"pyfirehose/utils/#arguments_4","text":"module_name - Name of the module to import files from.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_4","text":"The list of imported modules.","title":"Returns"},{"location":"pyfirehose/utils/#signature_5","text":"def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ...","title":"Signature"},{"location":"pyfirehose/utils/#patch_get_messages","text":"Show source in utils.py:312 Gets all the messages from a specified file. This will find and resolve dependencies, failing if the descriptor pool cannot satisfy them.","title":"patch_get_messages"},{"location":"pyfirehose/utils/#arguments_5","text":"files - The file names to extract messages from.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_5","text":"A dictionary mapping proto names to the message classes. This will include any dependent messages as well as any messages defined in the same file as a specified message.","title":"Returns"},{"location":"pyfirehose/utils/#signature_6","text":"def patch_get_messages ( self , files ): ...","title":"Signature"},{"location":"pyfirehose/block_extractors/","text":"Block Extractors Pyfirehose Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules Modules Async Multi Channel Async Optimized Async Single Channel Common","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#block-extractors","text":"Pyfirehose Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#modules","text":"Async Multi Channel Async Optimized Async Single Channel Common","title":"Modules"},{"location":"pyfirehose/block_extractors/async_multi_channel/","text":"Async Multi Channel Pyfirehose Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main asyncio_main Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#async-multi-channel","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#asyncio_main","text":"Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_multi_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_multi_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_multi_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_optimized/","text":"Async Optimized Pyfirehose Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main asyncio_main Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#async-optimized","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#asyncio_main","text":"Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_optimized/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_optimized/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_optimized/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_single_channel/","text":"Async Single Channel Pyfirehose Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main asyncio_main Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#async-single-channel","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#asyncio_main","text":"Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_single_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_single_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_single_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/","text":"Common Pyfirehose Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks get_secure_channel Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors. Yields A grpc.aio.Channel as an asynchronous context manager. Signature @asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ... process_blocks Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream. Arguments raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block. Returns A list of parsed data in the format returned by the block processor. Signature def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ... stream_blocks Show source in common.py:65 Return raw blocks (or parsed data) for the subset period between start and end . Arguments start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream. Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied. Raises BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number. Signature async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Callable [[ Message ], dict ] | None = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Common"},{"location":"pyfirehose/block_extractors/common/#common","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks","title":"Common"},{"location":"pyfirehose/block_extractors/common/#get_secure_channel","text":"Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors.","title":"get_secure_channel"},{"location":"pyfirehose/block_extractors/common/#yields","text":"A grpc.aio.Channel as an asynchronous context manager.","title":"Yields"},{"location":"pyfirehose/block_extractors/common/#signature","text":"@asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#process_blocks","text":"Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream.","title":"process_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments","text":"raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns","text":"A list of parsed data in the format returned by the block processor.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#signature_1","text":"def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#stream_blocks","text":"Show source in common.py:65 Return raw blocks (or parsed data) for the subset period between start and end .","title":"stream_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments_1","text":"start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns_1","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#raises","text":"BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number.","title":"Raises"},{"location":"pyfirehose/block_extractors/common/#signature_2","text":"async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Callable [[ Message ], dict ] | None = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_processors/","text":"Block Processors Pyfirehose Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules Modules Processors","title":"Block Processors"},{"location":"pyfirehose/block_processors/#block-processors","text":"Pyfirehose Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules","title":"Block Processors"},{"location":"pyfirehose/block_processors/#modules","text":"Processors","title":"Modules"},{"location":"pyfirehose/block_processors/processors/","text":"Processors Pyfirehose Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_processor default_substream_processor filtered_block_processor default_processor Show source in processors.py:32 Yield the filtered output of a gRPC response. Arguments data - The output message from a gRPC service. Yields The filtered data. Signature def default_processor ( data : Message ) -> dict : ... default_substream_processor Show source in processors.py:44 Yield filtered output data from a Substream-enabled gRPC endpoint. Arguments data - The output message from the Substream. Yields The filtered data according to the output modules present. Signature def default_substream_processor ( data : Message ) -> dict : ... filtered_block_processor Show source in processors.py:57 Yield all transactions from a Firehose V1 gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream. Arguments raw_block - Raw block received from the gRPC stream. Yields A dictionary containing the filtered block data. Examples { \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" } Signature def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#processors","text":"Pyfirehose Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_processor default_substream_processor filtered_block_processor","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#default_processor","text":"Show source in processors.py:32 Yield the filtered output of a gRPC response.","title":"default_processor"},{"location":"pyfirehose/block_processors/processors/#arguments","text":"data - The output message from a gRPC service.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields","text":"The filtered data.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#signature","text":"def default_processor ( data : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/block_processors/processors/#default_substream_processor","text":"Show source in processors.py:44 Yield filtered output data from a Substream-enabled gRPC endpoint.","title":"default_substream_processor"},{"location":"pyfirehose/block_processors/processors/#arguments_1","text":"data - The output message from the Substream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields_1","text":"The filtered data according to the output modules present.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#signature_1","text":"def default_substream_processor ( data : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/block_processors/processors/#filtered_block_processor","text":"Show source in processors.py:57 Yield all transactions from a Firehose V1 gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream.","title":"filtered_block_processor"},{"location":"pyfirehose/block_processors/processors/#arguments_2","text":"raw_block - Raw block received from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields_2","text":"A dictionary containing the filtered block data.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#examples","text":"{ \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" }","title":"Examples"},{"location":"pyfirehose/block_processors/processors/#signature_2","text":"def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/config/","text":"Config Pyfirehose Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Modules Modules Module Parser Ui","title":"Config"},{"location":"pyfirehose/config/#config","text":"Pyfirehose Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Modules","title":"Config"},{"location":"pyfirehose/config/#modules","text":"Module Parser Ui","title":"Modules"},{"location":"pyfirehose/config/module/","text":"Module Pyfirehose Index / Pyfirehose / Config / Module Auto-generated documentation for pyfirehose.config. main module. Module","title":"Module"},{"location":"pyfirehose/config/module/#module","text":"Pyfirehose Index / Pyfirehose / Config / Module Auto-generated documentation for pyfirehose.config. main module. Module","title":"Module"},{"location":"pyfirehose/config/parser/","text":"Parser Pyfirehose Index / Pyfirehose / Config / Parser Auto-generated documentation for pyfirehose.config.parser module. Parser Config StubConfig load_config load_stub_config load_substreams_modules_from_package Config Show source in parser.py:34 Holds the main config. Signature class Config : ... StubConfig Show source in parser.py:22 Holds the stub config. Signature class StubConfig : ... load_config Show source in parser.py:49 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config. Arguments file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file. Returns A boolean indicating if the stub config file has also been loaded. Raises ArgumentTypeError - If an entry is not recognized within the config file. HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file. Signature def load_config ( file : str , grpc_entry_id : str | None = None ) -> bool : ... load_stub_config Show source in parser.py:137 Load the stub config from a file (str) or directly from a key-value dictionary. Arguments stub - The stub to load either as a filepath or a dictionary. Raises HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the specified stub or request object cannot be imported. KeyError - If a required key is missing from the config file. Signature def load_stub_config ( stub : str | dict ) -> None : ... load_substreams_modules_from_package Show source in parser.py:121 Parses substreams modules from an .spkg file. Arguments url - Local path to .spkg file. Returns A dictionary of modules available in the package file. Signature def load_substreams_modules_from_package ( url : str ) -> dict : ...","title":"Parser"},{"location":"pyfirehose/config/parser/#parser","text":"Pyfirehose Index / Pyfirehose / Config / Parser Auto-generated documentation for pyfirehose.config.parser module. Parser Config StubConfig load_config load_stub_config load_substreams_modules_from_package","title":"Parser"},{"location":"pyfirehose/config/parser/#config","text":"Show source in parser.py:34 Holds the main config.","title":"Config"},{"location":"pyfirehose/config/parser/#signature","text":"class Config : ...","title":"Signature"},{"location":"pyfirehose/config/parser/#stubconfig","text":"Show source in parser.py:22 Holds the stub config.","title":"StubConfig"},{"location":"pyfirehose/config/parser/#signature_1","text":"class StubConfig : ...","title":"Signature"},{"location":"pyfirehose/config/parser/#load_config","text":"Show source in parser.py:49 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config.","title":"load_config"},{"location":"pyfirehose/config/parser/#arguments","text":"file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file.","title":"Arguments"},{"location":"pyfirehose/config/parser/#returns","text":"A boolean indicating if the stub config file has also been loaded.","title":"Returns"},{"location":"pyfirehose/config/parser/#raises","text":"ArgumentTypeError - If an entry is not recognized within the config file. HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/parser/#signature_2","text":"def load_config ( file : str , grpc_entry_id : str | None = None ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/parser/#load_stub_config","text":"Show source in parser.py:137 Load the stub config from a file (str) or directly from a key-value dictionary.","title":"load_stub_config"},{"location":"pyfirehose/config/parser/#arguments_1","text":"stub - The stub to load either as a filepath or a dictionary.","title":"Arguments"},{"location":"pyfirehose/config/parser/#raises_1","text":"HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the specified stub or request object cannot be imported. KeyError - If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/parser/#signature_3","text":"def load_stub_config ( stub : str | dict ) -> None : ...","title":"Signature"},{"location":"pyfirehose/config/parser/#load_substreams_modules_from_package","text":"Show source in parser.py:121 Parses substreams modules from an .spkg file.","title":"load_substreams_modules_from_package"},{"location":"pyfirehose/config/parser/#arguments_2","text":"url - Local path to .spkg file.","title":"Arguments"},{"location":"pyfirehose/config/parser/#returns_1","text":"A dictionary of modules available in the package file.","title":"Returns"},{"location":"pyfirehose/config/parser/#signature_4","text":"def load_substreams_modules_from_package ( url : str ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/config/ui/","text":"Ui Pyfirehose Index / Pyfirehose / Config / Ui Auto-generated documentation for pyfirehose.config.ui module. Ui Modules Modules App Forms Widgets","title":"Ui"},{"location":"pyfirehose/config/ui/#ui","text":"Pyfirehose Index / Pyfirehose / Config / Ui Auto-generated documentation for pyfirehose.config.ui module. Ui Modules","title":"Ui"},{"location":"pyfirehose/config/ui/#modules","text":"App Forms Widgets","title":"Modules"},{"location":"pyfirehose/config/ui/app/","text":"App Pyfirehose Index / Pyfirehose / Config / Ui / App Auto-generated documentation for pyfirehose.config.ui.app module. App ConfigApp ConfigApp().onStart ConfigApp Show source in app.py:17 Main app containing the forms for the config GUI. It acts as a medium of communication for getting value between forms, storing data as instance attributes (via the self.parentApp variable available in child forms). See npyscreen's documentation for reference. Signature class ConfigApp ( NPSAppManaged ): def __init__ ( self ): ... ConfigApp().onStart Show source in app.py:48 Signature def onStart ( self ): ...","title":"App"},{"location":"pyfirehose/config/ui/app/#app","text":"Pyfirehose Index / Pyfirehose / Config / Ui / App Auto-generated documentation for pyfirehose.config.ui.app module. App ConfigApp ConfigApp().onStart","title":"App"},{"location":"pyfirehose/config/ui/app/#configapp","text":"Show source in app.py:17 Main app containing the forms for the config GUI. It acts as a medium of communication for getting value between forms, storing data as instance attributes (via the self.parentApp variable available in child forms). See npyscreen's documentation for reference.","title":"ConfigApp"},{"location":"pyfirehose/config/ui/app/#signature","text":"class ConfigApp ( NPSAppManaged ): def __init__ ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/app/#configapponstart","text":"Show source in app.py:48","title":"ConfigApp().onStart"},{"location":"pyfirehose/config/ui/app/#signature_1","text":"def onStart ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/","text":"Forms Pyfirehose Index / Pyfirehose / Config / Ui / Forms Auto-generated documentation for pyfirehose.config.ui.forms module. Forms Modules Modules Generic Main Stub Config Edit","title":"Forms"},{"location":"pyfirehose/config/ui/forms/#forms","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Forms Auto-generated documentation for pyfirehose.config.ui.forms module. Forms Modules","title":"Forms"},{"location":"pyfirehose/config/ui/forms/#modules","text":"Generic Main Stub Config Edit","title":"Modules"},{"location":"pyfirehose/config/ui/forms/generic/","text":"Generic Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Generic Auto-generated documentation for pyfirehose.config.ui.forms.generic module. Generic ActionFormDiscard ActionFormDiscard().create_control_buttons ActionFormDiscard().on_discard ActionFormDiscard().whenPressed SplitActionForm SplitActionForm().get_half_way ActionFormDiscard Show source in generic.py:9 Generic class for an action form with an additional Discard button. Overload the on_discard method to customize its behavior. Signature class ActionFormDiscard ( ActionFormV2 , MiniButtonPress ): ... ActionFormDiscard().create_control_buttons Show source in generic.py:35 Signature def create_control_buttons ( self ): ... ActionFormDiscard().on_discard Show source in generic.py:60 Discard button hook to overload for customizing the behavior of the button. Signature def on_discard ( self ): ... ActionFormDiscard().whenPressed Show source in generic.py:19 Signature def whenPressed ( self ): ... SplitActionForm Show source in generic.py:66 Combine ActionFormV2 buttons with SplitForm horizontal line display. Signature class SplitActionForm ( ActionFormV2 , SplitForm ): ... SplitActionForm().get_half_way Show source in generic.py:70 Signature def get_half_way ( self , draw_line_at : int | None = None ) -> int : ...","title":"Generic"},{"location":"pyfirehose/config/ui/forms/generic/#generic","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Generic Auto-generated documentation for pyfirehose.config.ui.forms.generic module. Generic ActionFormDiscard ActionFormDiscard().create_control_buttons ActionFormDiscard().on_discard ActionFormDiscard().whenPressed SplitActionForm SplitActionForm().get_half_way","title":"Generic"},{"location":"pyfirehose/config/ui/forms/generic/#actionformdiscard","text":"Show source in generic.py:9 Generic class for an action form with an additional Discard button. Overload the on_discard method to customize its behavior.","title":"ActionFormDiscard"},{"location":"pyfirehose/config/ui/forms/generic/#signature","text":"class ActionFormDiscard ( ActionFormV2 , MiniButtonPress ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/generic/#actionformdiscardcreate_control_buttons","text":"Show source in generic.py:35","title":"ActionFormDiscard().create_control_buttons"},{"location":"pyfirehose/config/ui/forms/generic/#signature_1","text":"def create_control_buttons ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/generic/#actionformdiscardon_discard","text":"Show source in generic.py:60 Discard button hook to overload for customizing the behavior of the button.","title":"ActionFormDiscard().on_discard"},{"location":"pyfirehose/config/ui/forms/generic/#signature_2","text":"def on_discard ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/generic/#actionformdiscardwhenpressed","text":"Show source in generic.py:19","title":"ActionFormDiscard().whenPressed"},{"location":"pyfirehose/config/ui/forms/generic/#signature_3","text":"def whenPressed ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/generic/#splitactionform","text":"Show source in generic.py:66 Combine ActionFormV2 buttons with SplitForm horizontal line display.","title":"SplitActionForm"},{"location":"pyfirehose/config/ui/forms/generic/#signature_4","text":"class SplitActionForm ( ActionFormV2 , SplitForm ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/generic/#splitactionformget_half_way","text":"Show source in generic.py:70","title":"SplitActionForm().get_half_way"},{"location":"pyfirehose/config/ui/forms/generic/#signature_5","text":"def get_half_way ( self , draw_line_at : int | None = None ) -> int : ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/main/","text":"Main Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Main Auto-generated documentation for pyfirehose.config.ui.forms.main module. Main MainForm MainForm().afterEditing MainForm().beforeEditing MainForm().create MainForm().switch_form MainForm Show source in main.py:14 Main form presenting the main config file with a menu for accessing the edit functions. Attributes main_menu - holds the menu entries. next_form - describe the next form to be loaded after exiting the main form ( None exits the application). stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget. Signature class MainForm ( FormWithMenus ): ... MainForm().afterEditing Show source in main.py:25 Called by npyscreen when the form is cycled out of the screen. Signature def afterEditing ( self ): ... MainForm().beforeEditing Show source in main.py:31 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... MainForm().create Show source in main.py:41 Signature def create ( self ): ... MainForm().switch_form Show source in main.py:61 Helper function to set the next appropriate form when using the menu. Arguments form - the form name. Signature def switch_form ( self , form : str ) -> None : ...","title":"Main"},{"location":"pyfirehose/config/ui/forms/main/#main","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Main Auto-generated documentation for pyfirehose.config.ui.forms.main module. Main MainForm MainForm().afterEditing MainForm().beforeEditing MainForm().create MainForm().switch_form","title":"Main"},{"location":"pyfirehose/config/ui/forms/main/#mainform","text":"Show source in main.py:14 Main form presenting the main config file with a menu for accessing the edit functions.","title":"MainForm"},{"location":"pyfirehose/config/ui/forms/main/#attributes","text":"main_menu - holds the menu entries. next_form - describe the next form to be loaded after exiting the main form ( None exits the application). stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/main/#signature","text":"class MainForm ( FormWithMenus ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/main/#mainformafterediting","text":"Show source in main.py:25 Called by npyscreen when the form is cycled out of the screen.","title":"MainForm().afterEditing"},{"location":"pyfirehose/config/ui/forms/main/#signature_1","text":"def afterEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/main/#mainformbeforeediting","text":"Show source in main.py:31 Called by npyscreen before the form gets drawn on the screen.","title":"MainForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/main/#signature_2","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/main/#mainformcreate","text":"Show source in main.py:41","title":"MainForm().create"},{"location":"pyfirehose/config/ui/forms/main/#signature_3","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/main/#mainformswitch_form","text":"Show source in main.py:61 Helper function to set the next appropriate form when using the menu.","title":"MainForm().switch_form"},{"location":"pyfirehose/config/ui/forms/main/#arguments","text":"form - the form name.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/main/#signature_4","text":"def switch_form ( self , form : str ) -> None : ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/","text":"Stub Config Edit Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Stub Config Edit Auto-generated documentation for pyfirehose.config.ui.forms.stub_config_edit module. Stub Config Edit StubConfigConfirmEditForm StubConfigConfirmEditForm().create StubConfigConfirmEditForm().on_cancel StubConfigConfirmEditForm().on_discard StubConfigConfirmEditForm().on_ok StubConfigEndpointsForm StubConfigEndpointsForm().beforeEditing StubConfigEndpointsForm().create StubConfigEndpointsForm().on_cancel StubConfigEndpointsForm().on_ok StubConfigInputsForm StubConfigInputsForm().clear_input StubConfigInputsForm().create StubConfigInputsForm().on_cancel StubConfigInputsForm().on_ok StubConfigMethodsForm StubConfigMethodsForm().beforeEditing StubConfigMethodsForm().create StubConfigMethodsForm().on_cancel StubConfigMethodsForm().on_ok StubConfigOutputsForm StubConfigOutputsForm().beforeEditing StubConfigOutputsForm().create StubConfigOutputsForm().create_output_selection StubConfigOutputsForm().on_cancel StubConfigOutputsForm().on_ok StubConfigSaveFileForm StubConfigSaveFileForm().create StubConfigSaveFileForm().on_cancel StubConfigSaveFileForm().on_ok StubConfigServicesForm StubConfigServicesForm().beforeEditing StubConfigServicesForm().create StubConfigServicesForm().on_cancel StubConfigServicesForm().on_ok StubConfigConfirmEditForm Show source in stub_config_edit.py:563 Confirmation screen displaying the final stub config as it will appear in the saved file. Signature class StubConfigConfirmEditForm ( ActionFormDiscard ): ... See also ActionFormDiscard StubConfigConfirmEditForm().create Show source in stub_config_edit.py:567 Signature def create ( self ): ... StubConfigConfirmEditForm().on_cancel Show source in stub_config_edit.py:593 Signature def on_cancel ( self ): ... StubConfigConfirmEditForm().on_discard Show source in stub_config_edit.py:596 Signature def on_discard ( self ): ... StubConfigConfirmEditForm().on_ok Show source in stub_config_edit.py:575 Signature def on_ok ( self ): ... StubConfigEndpointsForm Show source in stub_config_edit.py:35 Choose an endpoint to edit or create a new stub config for. Attributes ml_endpoints - an EndpointsTitleSelectOne widget to select an endpoint. Signature class StubConfigEndpointsForm ( ActionFormV2 ): ... StubConfigEndpointsForm().beforeEditing Show source in stub_config_edit.py:42 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... StubConfigEndpointsForm().create Show source in stub_config_edit.py:52 Signature def create ( self ): ... StubConfigEndpointsForm().on_cancel Show source in stub_config_edit.py:71 Signature def on_cancel ( self ): ... StubConfigEndpointsForm().on_ok Show source in stub_config_edit.py:60 Signature def on_ok ( self ): ... StubConfigInputsForm Show source in stub_config_edit.py:232 Edit the request parameters sent to the gRPC endpoint. Input options will be created according to their expected types (bool -> InputBoolean , etc.). Attributes w_inputs - an InputsListDisplay widget to present the list of input options. Signature class StubConfigInputsForm ( ActionFormV2 ): ... StubConfigInputsForm().clear_input Show source in stub_config_edit.py:241 Callback function for clearing input shortcuts. Pressing 'c' will ask for confirmation before clearing, 'C' will not. Arguments show_popup - if True, asks the user for confirmation before clearing the input. Signature def clear_input ( self , show_popup : bool = True ) -> None : ... StubConfigInputsForm().create Show source in stub_config_edit.py:264 Signature def create ( self ): ... StubConfigInputsForm().on_cancel Show source in stub_config_edit.py:383 Signature def on_cancel ( self ): ... StubConfigInputsForm().on_ok Show source in stub_config_edit.py:347 Signature def on_ok ( self ): ... StubConfigMethodsForm Show source in stub_config_edit.py:185 Choose a gRPC method from the specified service. Attributes methods - available methods provided by the reflection service. ml_methods - a TitleSelectOne widget to select which method the stub will use. Signature class StubConfigMethodsForm ( ActionFormV2 ): ... StubConfigMethodsForm().beforeEditing Show source in stub_config_edit.py:193 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... StubConfigMethodsForm().create Show source in stub_config_edit.py:203 Signature def create ( self ): ... StubConfigMethodsForm().on_cancel Show source in stub_config_edit.py:228 Signature def on_cancel ( self ): ... StubConfigMethodsForm().on_ok Show source in stub_config_edit.py:214 Signature def on_ok ( self ): ... StubConfigOutputsForm Show source in stub_config_edit.py:386 Select and filter fields that will be received from the gRPC stream. The top selection widget presents a list of compatible output types while the bottom tree widget list the available fields that can be selected to be kept from the response. Attributes is_substream - Identifies if the service is using Substreams. output_descriptors - List of available Descriptor for the corresponding method. saved_output_selection - Stores the state of a selection tree to be restored when switching output types. Signature class StubConfigOutputsForm ( SplitActionForm ): ... See also SplitActionForm StubConfigOutputsForm().beforeEditing Show source in stub_config_edit.py:398 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... StubConfigOutputsForm().create Show source in stub_config_edit.py:408 Signature def create ( self ): ... StubConfigOutputsForm().create_output_selection Show source in stub_config_edit.py:472 Create the output field selection tree from the selected output type. If previous_selected is supplied, the state of the node in the tree ( selected and expanded ) will be set according to its description. Arguments previous_selected - A dictionnary with a node's (depth, content) as key and its state (selected, expanded) as value. Returns The root node of the selection tree. Signature def create_output_selection ( self , previous_selected : dict [ tuple [ int , str ], tuple [ int , int ]] | None = None ) -> OutputSelectionTreeData : ... See also OutputSelectionTreeData StubConfigOutputsForm().on_cancel Show source in stub_config_edit.py:559 Signature def on_cancel ( self ): ... StubConfigOutputsForm().on_ok Show source in stub_config_edit.py:522 Signature def on_ok ( self ): ... StubConfigSaveFileForm Show source in stub_config_edit.py:75 Choose the save file location for the stub config. Attributes stub_loaded - indicates if the stub has been loaded from the specified file. tfc_stub_save_file - a TitleFilenameCombo widget to select the stub save file. Signature class StubConfigSaveFileForm ( ActionFormV2 ): ... StubConfigSaveFileForm().create Show source in stub_config_edit.py:83 Signature def create ( self ): ... StubConfigSaveFileForm().on_cancel Show source in stub_config_edit.py:130 Signature def on_cancel ( self ): ... StubConfigSaveFileForm().on_ok Show source in stub_config_edit.py:103 Signature def on_ok ( self ): ... StubConfigServicesForm Show source in stub_config_edit.py:133 Choose a service from the services available on the specified endpoint. The endpoint has to provide a reflection service in order to determine the available services. Attributes ml_services - a TitleSelectOne widget to select which service the stub will use. Signature class StubConfigServicesForm ( ActionFormV2 ): ... StubConfigServicesForm().beforeEditing Show source in stub_config_edit.py:142 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... StubConfigServicesForm().create Show source in stub_config_edit.py:152 Signature def create ( self ): ... StubConfigServicesForm().on_cancel Show source in stub_config_edit.py:181 Signature def on_cancel ( self ): ... StubConfigServicesForm().on_ok Show source in stub_config_edit.py:170 Signature def on_ok ( self ): ...","title":"Stub Config Edit"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stub-config-edit","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Forms / Stub Config Edit Auto-generated documentation for pyfirehose.config.ui.forms.stub_config_edit module. Stub Config Edit StubConfigConfirmEditForm StubConfigConfirmEditForm().create StubConfigConfirmEditForm().on_cancel StubConfigConfirmEditForm().on_discard StubConfigConfirmEditForm().on_ok StubConfigEndpointsForm StubConfigEndpointsForm().beforeEditing StubConfigEndpointsForm().create StubConfigEndpointsForm().on_cancel StubConfigEndpointsForm().on_ok StubConfigInputsForm StubConfigInputsForm().clear_input StubConfigInputsForm().create StubConfigInputsForm().on_cancel StubConfigInputsForm().on_ok StubConfigMethodsForm StubConfigMethodsForm().beforeEditing StubConfigMethodsForm().create StubConfigMethodsForm().on_cancel StubConfigMethodsForm().on_ok StubConfigOutputsForm StubConfigOutputsForm().beforeEditing StubConfigOutputsForm().create StubConfigOutputsForm().create_output_selection StubConfigOutputsForm().on_cancel StubConfigOutputsForm().on_ok StubConfigSaveFileForm StubConfigSaveFileForm().create StubConfigSaveFileForm().on_cancel StubConfigSaveFileForm().on_ok StubConfigServicesForm StubConfigServicesForm().beforeEditing StubConfigServicesForm().create StubConfigServicesForm().on_cancel StubConfigServicesForm().on_ok","title":"Stub Config Edit"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigconfirmeditform","text":"Show source in stub_config_edit.py:563 Confirmation screen displaying the final stub config as it will appear in the saved file.","title":"StubConfigConfirmEditForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature","text":"class StubConfigConfirmEditForm ( ActionFormDiscard ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#see-also","text":"ActionFormDiscard","title":"See also"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigconfirmeditformcreate","text":"Show source in stub_config_edit.py:567","title":"StubConfigConfirmEditForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_1","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigconfirmeditformon_cancel","text":"Show source in stub_config_edit.py:593","title":"StubConfigConfirmEditForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_2","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigconfirmeditformon_discard","text":"Show source in stub_config_edit.py:596","title":"StubConfigConfirmEditForm().on_discard"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_3","text":"def on_discard ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigconfirmeditformon_ok","text":"Show source in stub_config_edit.py:575","title":"StubConfigConfirmEditForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_4","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigendpointsform","text":"Show source in stub_config_edit.py:35 Choose an endpoint to edit or create a new stub config for.","title":"StubConfigEndpointsForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes","text":"ml_endpoints - an EndpointsTitleSelectOne widget to select an endpoint.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_5","text":"class StubConfigEndpointsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigendpointsformbeforeediting","text":"Show source in stub_config_edit.py:42 Called by npyscreen before the form gets drawn on the screen.","title":"StubConfigEndpointsForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_6","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigendpointsformcreate","text":"Show source in stub_config_edit.py:52","title":"StubConfigEndpointsForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_7","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigendpointsformon_cancel","text":"Show source in stub_config_edit.py:71","title":"StubConfigEndpointsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_8","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigendpointsformon_ok","text":"Show source in stub_config_edit.py:60","title":"StubConfigEndpointsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_9","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfiginputsform","text":"Show source in stub_config_edit.py:232 Edit the request parameters sent to the gRPC endpoint. Input options will be created according to their expected types (bool -> InputBoolean , etc.).","title":"StubConfigInputsForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes_1","text":"w_inputs - an InputsListDisplay widget to present the list of input options.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_10","text":"class StubConfigInputsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfiginputsformclear_input","text":"Show source in stub_config_edit.py:241 Callback function for clearing input shortcuts. Pressing 'c' will ask for confirmation before clearing, 'C' will not.","title":"StubConfigInputsForm().clear_input"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#arguments","text":"show_popup - if True, asks the user for confirmation before clearing the input.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_11","text":"def clear_input ( self , show_popup : bool = True ) -> None : ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfiginputsformcreate","text":"Show source in stub_config_edit.py:264","title":"StubConfigInputsForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_12","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfiginputsformon_cancel","text":"Show source in stub_config_edit.py:383","title":"StubConfigInputsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_13","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfiginputsformon_ok","text":"Show source in stub_config_edit.py:347","title":"StubConfigInputsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_14","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigmethodsform","text":"Show source in stub_config_edit.py:185 Choose a gRPC method from the specified service.","title":"StubConfigMethodsForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes_2","text":"methods - available methods provided by the reflection service. ml_methods - a TitleSelectOne widget to select which method the stub will use.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_15","text":"class StubConfigMethodsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigmethodsformbeforeediting","text":"Show source in stub_config_edit.py:193 Called by npyscreen before the form gets drawn on the screen.","title":"StubConfigMethodsForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_16","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigmethodsformcreate","text":"Show source in stub_config_edit.py:203","title":"StubConfigMethodsForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_17","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigmethodsformon_cancel","text":"Show source in stub_config_edit.py:228","title":"StubConfigMethodsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_18","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigmethodsformon_ok","text":"Show source in stub_config_edit.py:214","title":"StubConfigMethodsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_19","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsform","text":"Show source in stub_config_edit.py:386 Select and filter fields that will be received from the gRPC stream. The top selection widget presents a list of compatible output types while the bottom tree widget list the available fields that can be selected to be kept from the response.","title":"StubConfigOutputsForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes_3","text":"is_substream - Identifies if the service is using Substreams. output_descriptors - List of available Descriptor for the corresponding method. saved_output_selection - Stores the state of a selection tree to be restored when switching output types.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_20","text":"class StubConfigOutputsForm ( SplitActionForm ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#see-also_1","text":"SplitActionForm","title":"See also"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsformbeforeediting","text":"Show source in stub_config_edit.py:398 Called by npyscreen before the form gets drawn on the screen.","title":"StubConfigOutputsForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_21","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsformcreate","text":"Show source in stub_config_edit.py:408","title":"StubConfigOutputsForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_22","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsformcreate_output_selection","text":"Show source in stub_config_edit.py:472 Create the output field selection tree from the selected output type. If previous_selected is supplied, the state of the node in the tree ( selected and expanded ) will be set according to its description.","title":"StubConfigOutputsForm().create_output_selection"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#arguments_1","text":"previous_selected - A dictionnary with a node's (depth, content) as key and its state (selected, expanded) as value.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#returns","text":"The root node of the selection tree.","title":"Returns"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_23","text":"def create_output_selection ( self , previous_selected : dict [ tuple [ int , str ], tuple [ int , int ]] | None = None ) -> OutputSelectionTreeData : ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#see-also_2","text":"OutputSelectionTreeData","title":"See also"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsformon_cancel","text":"Show source in stub_config_edit.py:559","title":"StubConfigOutputsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_24","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigoutputsformon_ok","text":"Show source in stub_config_edit.py:522","title":"StubConfigOutputsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_25","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigsavefileform","text":"Show source in stub_config_edit.py:75 Choose the save file location for the stub config.","title":"StubConfigSaveFileForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes_4","text":"stub_loaded - indicates if the stub has been loaded from the specified file. tfc_stub_save_file - a TitleFilenameCombo widget to select the stub save file.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_26","text":"class StubConfigSaveFileForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigsavefileformcreate","text":"Show source in stub_config_edit.py:83","title":"StubConfigSaveFileForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_27","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigsavefileformon_cancel","text":"Show source in stub_config_edit.py:130","title":"StubConfigSaveFileForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_28","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigsavefileformon_ok","text":"Show source in stub_config_edit.py:103","title":"StubConfigSaveFileForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_29","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigservicesform","text":"Show source in stub_config_edit.py:133 Choose a service from the services available on the specified endpoint. The endpoint has to provide a reflection service in order to determine the available services.","title":"StubConfigServicesForm"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#attributes_5","text":"ml_services - a TitleSelectOne widget to select which service the stub will use.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_30","text":"class StubConfigServicesForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigservicesformbeforeediting","text":"Show source in stub_config_edit.py:142 Called by npyscreen before the form gets drawn on the screen.","title":"StubConfigServicesForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_31","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigservicesformcreate","text":"Show source in stub_config_edit.py:152","title":"StubConfigServicesForm().create"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_32","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigservicesformon_cancel","text":"Show source in stub_config_edit.py:181","title":"StubConfigServicesForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_33","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#stubconfigservicesformon_ok","text":"Show source in stub_config_edit.py:170","title":"StubConfigServicesForm().on_ok"},{"location":"pyfirehose/config/ui/forms/stub_config_edit/#signature_34","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/","text":"Widgets Pyfirehose Index / Pyfirehose / Config / Ui / Widgets Auto-generated documentation for pyfirehose.config.ui.widgets module. Widgets Modules Modules Custom Input Validators Inputs","title":"Widgets"},{"location":"pyfirehose/config/ui/widgets/#widgets","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Widgets Auto-generated documentation for pyfirehose.config.ui.widgets module. Widgets Modules","title":"Widgets"},{"location":"pyfirehose/config/ui/widgets/#modules","text":"Custom Input Validators Inputs","title":"Modules"},{"location":"pyfirehose/config/ui/widgets/custom/","text":"Custom Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Custom Auto-generated documentation for pyfirehose.config.ui.widgets.custom module. Custom CodeHighlightedPager CodeHighlightedTextfield CodeHighlightedTextfield().update_highlighting CodeHighlightedTitlePager EndpointsSelectOne EndpointsSelectOne().display_value EndpointsTitleSelectOne EnumSelectOneOrNone EnumSelectOneOrNone().h_select EnumTitleSelectOneOrNone OutputSelectionMLTreeMultiSelectAnnotated OutputSelectionTreeData OutputSelectionTreeLineSelectableAnnotated OutputSelectionTreeLineSelectableAnnotated().getAnnotationAndColor OutputTypesSelectOne OutputTypesSelectOne().actionHighlighted OutputTypesTitleSelectOne colorize CodeHighlightedPager Show source in custom.py:57 Syntax highlight enabled Pager using CodeHighlightedTextfield as line display. It can syntax highlight any language currently supported by the pygments library by passing the appropriate lexer to the constructor. Signature class CodeHighlightedPager ( Pager ): def __init__ ( self , lexer = None , * args , ** kwargs ): ... CodeHighlightedTextfield Show source in custom.py:30 Syntax highlight enabled Textfield for displaying JSON config files. Attributes _highlightingdata - internal array specifying special control characters for curses to display colors. syntax_highlighting - enable syntax highlight for npyscreen to call the update_highlight method on redraw. Signature class CodeHighlightedTextfield ( Textfield ): def __init__ ( self , * args , ** kwargs ): ... CodeHighlightedTextfield().update_highlighting Show source in custom.py:43 Called on every call to the internal _print function. See Textfield implementation for details Signature def update_highlighting ( self , start = None , end = None , clear = False ): ... CodeHighlightedTitlePager Show source in custom.py:82 Titled version of the CodeHighlightedPager widget. See npyscreen's documentation for reference. Signature class CodeHighlightedTitlePager ( TitlePager ): ... EndpointsSelectOne Show source in custom.py:91 Custom single selection widget to display the main config's endpoint data. See npyscreen's documentation for reference. Signature class EndpointsSelectOne ( SelectOne ): ... EndpointsSelectOne().display_value Show source in custom.py:98 Signature def display_value ( self , vl : dict ): ... EndpointsTitleSelectOne Show source in custom.py:104 Title version of the EndpointsSelectOne widget. See npyscreen's documentation for reference. Signature class EndpointsTitleSelectOne ( TitleSelectOne ): ... EnumSelectOneOrNone Show source in custom.py:113 Custom single selection widget to allow selecting one or none of the available values. Used by the InputEnum option widget. Signature class EnumSelectOneOrNone ( SelectOne ): ... EnumSelectOneOrNone().h_select Show source in custom.py:119 Signature def h_select ( self , ch ): ... EnumTitleSelectOneOrNone Show source in custom.py:125 Title version of the EnumSelectOneOrNone widget. See npyscreen's documentation for reference. Signature class EnumTitleSelectOneOrNone ( TitleSelectOne ): ... OutputSelectionMLTreeMultiSelectAnnotated Show source in custom.py:154 Custom multi-selection tree widget using OutputSelectionTreeLineSelectableAnnotated as line display. Signature class OutputSelectionMLTreeMultiSelectAnnotated ( MLTreeMultiSelectAnnotated ): ... OutputSelectionTreeData Show source in custom.py:134 A TreeData node representing an output field from a Message output type. Attributes annotate - Text annotation to display next to the node content. annotate_color - Color of the text annotation (see reference for a list of valid values). Signature class OutputSelectionTreeData ( TreeData ): def __init__ ( self , annotate : str = \"?\" , annotate_color : str = \"CONTROL\" , * args , ** kwargs ): ... OutputSelectionTreeLineSelectableAnnotated Show source in custom.py:147 Custom tree line selectable widget implementing the annotation behavior. Signature class OutputSelectionTreeLineSelectableAnnotated ( TreeLineSelectableAnnotated ): ... OutputSelectionTreeLineSelectableAnnotated().getAnnotationAndColor Show source in custom.py:151 Signature def getAnnotationAndColor ( self ): ... OutputTypesSelectOne Show source in custom.py:160 Custom single selection widget to display gRPC output types and link them to the output field selection widget. See npyscreen's documentation for reference. Signature class OutputTypesSelectOne ( SelectOne , MultiLineAction ): def __init__ ( self , * args , ** kwargs ): ... OutputTypesSelectOne().actionHighlighted Show source in custom.py:171 Signature def actionHighlighted ( self , act_on_this , key_press ): ... OutputTypesTitleSelectOne Show source in custom.py:188 Title version of the OutputTypesSelectOne widget. See npyscreen's documentation for reference. Signature class OutputTypesTitleSelectOne ( TitleSelectOne ): ... colorize Show source in custom.py:197 Convert a string containg ANSI escape codes to curses control characters for color display. Adapted from Cansi library (https://github.com/tslight/cansi). Some of the original comments kept in the code. Arguments default_color - passed to the mkcolors function (see documentation for reference). string - a string containing ANSI escape codes for color. Returns A list of pairs of curses ' control character and their applicable length. Examples [(2097152, 10)] will color 10 characters bold ( curses.A_BOLD = 2097152 ). Signature def colorize ( default_color : int , string : str ) -> list [ tuple [ int , int ]]: ...","title":"Custom"},{"location":"pyfirehose/config/ui/widgets/custom/#custom","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Custom Auto-generated documentation for pyfirehose.config.ui.widgets.custom module. Custom CodeHighlightedPager CodeHighlightedTextfield CodeHighlightedTextfield().update_highlighting CodeHighlightedTitlePager EndpointsSelectOne EndpointsSelectOne().display_value EndpointsTitleSelectOne EnumSelectOneOrNone EnumSelectOneOrNone().h_select EnumTitleSelectOneOrNone OutputSelectionMLTreeMultiSelectAnnotated OutputSelectionTreeData OutputSelectionTreeLineSelectableAnnotated OutputSelectionTreeLineSelectableAnnotated().getAnnotationAndColor OutputTypesSelectOne OutputTypesSelectOne().actionHighlighted OutputTypesTitleSelectOne colorize","title":"Custom"},{"location":"pyfirehose/config/ui/widgets/custom/#codehighlightedpager","text":"Show source in custom.py:57 Syntax highlight enabled Pager using CodeHighlightedTextfield as line display. It can syntax highlight any language currently supported by the pygments library by passing the appropriate lexer to the constructor.","title":"CodeHighlightedPager"},{"location":"pyfirehose/config/ui/widgets/custom/#signature","text":"class CodeHighlightedPager ( Pager ): def __init__ ( self , lexer = None , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#codehighlightedtextfield","text":"Show source in custom.py:30 Syntax highlight enabled Textfield for displaying JSON config files.","title":"CodeHighlightedTextfield"},{"location":"pyfirehose/config/ui/widgets/custom/#attributes","text":"_highlightingdata - internal array specifying special control characters for curses to display colors. syntax_highlighting - enable syntax highlight for npyscreen to call the update_highlight method on redraw.","title":"Attributes"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_1","text":"class CodeHighlightedTextfield ( Textfield ): def __init__ ( self , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#codehighlightedtextfieldupdate_highlighting","text":"Show source in custom.py:43 Called on every call to the internal _print function. See Textfield implementation for details","title":"CodeHighlightedTextfield().update_highlighting"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_2","text":"def update_highlighting ( self , start = None , end = None , clear = False ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#codehighlightedtitlepager","text":"Show source in custom.py:82 Titled version of the CodeHighlightedPager widget. See npyscreen's documentation for reference.","title":"CodeHighlightedTitlePager"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_3","text":"class CodeHighlightedTitlePager ( TitlePager ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#endpointsselectone","text":"Show source in custom.py:91 Custom single selection widget to display the main config's endpoint data. See npyscreen's documentation for reference.","title":"EndpointsSelectOne"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_4","text":"class EndpointsSelectOne ( SelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#endpointsselectonedisplay_value","text":"Show source in custom.py:98","title":"EndpointsSelectOne().display_value"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_5","text":"def display_value ( self , vl : dict ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#endpointstitleselectone","text":"Show source in custom.py:104 Title version of the EndpointsSelectOne widget. See npyscreen's documentation for reference.","title":"EndpointsTitleSelectOne"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_6","text":"class EndpointsTitleSelectOne ( TitleSelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#enumselectoneornone","text":"Show source in custom.py:113 Custom single selection widget to allow selecting one or none of the available values. Used by the InputEnum option widget.","title":"EnumSelectOneOrNone"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_7","text":"class EnumSelectOneOrNone ( SelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#enumselectoneornoneh_select","text":"Show source in custom.py:119","title":"EnumSelectOneOrNone().h_select"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_8","text":"def h_select ( self , ch ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#enumtitleselectoneornone","text":"Show source in custom.py:125 Title version of the EnumSelectOneOrNone widget. See npyscreen's documentation for reference.","title":"EnumTitleSelectOneOrNone"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_9","text":"class EnumTitleSelectOneOrNone ( TitleSelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputselectionmltreemultiselectannotated","text":"Show source in custom.py:154 Custom multi-selection tree widget using OutputSelectionTreeLineSelectableAnnotated as line display.","title":"OutputSelectionMLTreeMultiSelectAnnotated"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_10","text":"class OutputSelectionMLTreeMultiSelectAnnotated ( MLTreeMultiSelectAnnotated ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputselectiontreedata","text":"Show source in custom.py:134 A TreeData node representing an output field from a Message output type.","title":"OutputSelectionTreeData"},{"location":"pyfirehose/config/ui/widgets/custom/#attributes_1","text":"annotate - Text annotation to display next to the node content. annotate_color - Color of the text annotation (see reference for a list of valid values).","title":"Attributes"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_11","text":"class OutputSelectionTreeData ( TreeData ): def __init__ ( self , annotate : str = \"?\" , annotate_color : str = \"CONTROL\" , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputselectiontreelineselectableannotated","text":"Show source in custom.py:147 Custom tree line selectable widget implementing the annotation behavior.","title":"OutputSelectionTreeLineSelectableAnnotated"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_12","text":"class OutputSelectionTreeLineSelectableAnnotated ( TreeLineSelectableAnnotated ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputselectiontreelineselectableannotatedgetannotationandcolor","text":"Show source in custom.py:151","title":"OutputSelectionTreeLineSelectableAnnotated().getAnnotationAndColor"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_13","text":"def getAnnotationAndColor ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputtypesselectone","text":"Show source in custom.py:160 Custom single selection widget to display gRPC output types and link them to the output field selection widget. See npyscreen's documentation for reference.","title":"OutputTypesSelectOne"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_14","text":"class OutputTypesSelectOne ( SelectOne , MultiLineAction ): def __init__ ( self , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputtypesselectoneactionhighlighted","text":"Show source in custom.py:171","title":"OutputTypesSelectOne().actionHighlighted"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_15","text":"def actionHighlighted ( self , act_on_this , key_press ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#outputtypestitleselectone","text":"Show source in custom.py:188 Title version of the OutputTypesSelectOne widget. See npyscreen's documentation for reference.","title":"OutputTypesTitleSelectOne"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_16","text":"class OutputTypesTitleSelectOne ( TitleSelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/custom/#colorize","text":"Show source in custom.py:197 Convert a string containg ANSI escape codes to curses control characters for color display. Adapted from Cansi library (https://github.com/tslight/cansi). Some of the original comments kept in the code.","title":"colorize"},{"location":"pyfirehose/config/ui/widgets/custom/#arguments","text":"default_color - passed to the mkcolors function (see documentation for reference). string - a string containing ANSI escape codes for color.","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/custom/#returns","text":"A list of pairs of curses ' control character and their applicable length.","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/custom/#examples","text":"[(2097152, 10)] will color 10 characters bold ( curses.A_BOLD = 2097152 ).","title":"Examples"},{"location":"pyfirehose/config/ui/widgets/custom/#signature_17","text":"def colorize ( default_color : int , string : str ) -> list [ tuple [ int , int ]]: ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/","text":"Input Validators Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Input Validators Auto-generated documentation for pyfirehose.config.ui.widgets.input_validators module. Input Validators bool_validator enum_validator float_validator integer_validator message_validator string_validator bool_validator Show source in input_validators.py:45 Checks that a string is a valid boolean representation. Arguments value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators). Returns A boolean indicating if the given string is a valid boolean representation. Signature def bool_validator ( value : str , ** kwargs ) -> bool : ... enum_validator Show source in input_validators.py:58 Checks that a string is a valid enum value from a given sequence of enum values. Arguments value - the string to test. enum_values - the valid string values for the enum. Returns A boolean indicating if the given string is a valid enum representation. Signature def enum_validator ( value : str , enum_values : Sequence [ str ]): ... float_validator Show source in input_validators.py:27 Checks that a string is a valid floating point representation. Arguments value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators). Returns A boolean indicating if the given string is a valid floating point representation. Signature def float_validator ( value : str , ** kwargs ) -> bool : ... integer_validator Show source in input_validators.py:9 Checks that a string is a valid integer representation. Arguments value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators). Returns A boolean indicating if the given string is a valid integer representation. Signature def integer_validator ( value : str , ** kwargs ) -> bool : ... message_validator Show source in input_validators.py:84 Placeholder validator for messages. Arguments value - a string (unused). kwargs - additional keyword arguments (unused, allow generic use of validators). Returns True Signature def message_validator ( value : str , ** kwargs ): ... string_validator Show source in input_validators.py:71 Placeholder validator for strings. Arguments value - a string (unused). kwargs - additional keyword arguments (unused, allow generic use of validators). Returns True Signature def string_validator ( value : str , ** kwargs ): ...","title":"Input Validators"},{"location":"pyfirehose/config/ui/widgets/input_validators/#input-validators","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Input Validators Auto-generated documentation for pyfirehose.config.ui.widgets.input_validators module. Input Validators bool_validator enum_validator float_validator integer_validator message_validator string_validator","title":"Input Validators"},{"location":"pyfirehose/config/ui/widgets/input_validators/#bool_validator","text":"Show source in input_validators.py:45 Checks that a string is a valid boolean representation.","title":"bool_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments","text":"value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators).","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns","text":"A boolean indicating if the given string is a valid boolean representation.","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature","text":"def bool_validator ( value : str , ** kwargs ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/#enum_validator","text":"Show source in input_validators.py:58 Checks that a string is a valid enum value from a given sequence of enum values.","title":"enum_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments_1","text":"value - the string to test. enum_values - the valid string values for the enum.","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns_1","text":"A boolean indicating if the given string is a valid enum representation.","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature_1","text":"def enum_validator ( value : str , enum_values : Sequence [ str ]): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/#float_validator","text":"Show source in input_validators.py:27 Checks that a string is a valid floating point representation.","title":"float_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments_2","text":"value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators).","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns_2","text":"A boolean indicating if the given string is a valid floating point representation.","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature_2","text":"def float_validator ( value : str , ** kwargs ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/#integer_validator","text":"Show source in input_validators.py:9 Checks that a string is a valid integer representation.","title":"integer_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments_3","text":"value - the string to test. kwargs - additional keyword arguments (unused, allow generic use of validators).","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns_3","text":"A boolean indicating if the given string is a valid integer representation.","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature_3","text":"def integer_validator ( value : str , ** kwargs ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/#message_validator","text":"Show source in input_validators.py:84 Placeholder validator for messages.","title":"message_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments_4","text":"value - a string (unused). kwargs - additional keyword arguments (unused, allow generic use of validators).","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns_4","text":"True","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature_4","text":"def message_validator ( value : str , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/input_validators/#string_validator","text":"Show source in input_validators.py:71 Placeholder validator for strings.","title":"string_validator"},{"location":"pyfirehose/config/ui/widgets/input_validators/#arguments_5","text":"value - a string (unused). kwargs - additional keyword arguments (unused, allow generic use of validators).","title":"Arguments"},{"location":"pyfirehose/config/ui/widgets/input_validators/#returns_5","text":"True","title":"Returns"},{"location":"pyfirehose/config/ui/widgets/input_validators/#signature_5","text":"def string_validator ( value : str , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/","text":"Inputs Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Inputs Auto-generated documentation for pyfirehose.config.ui.widgets.inputs module. Inputs InputBool InputBool().when_set InputEnum InputFloat InputFloat().set InputInteger InputInteger().set InputMessage InputRepeated InputRepeated().set InputString InputValidator InputValidator().set_from_widget_value InputsListDisplay on_ok_input_validation_hook InputBool Show source in inputs.py:99 Custom option boolean input to convert string values to bool. Signature class InputBool ( OptionBoolean ): ... InputBool().when_set Show source in inputs.py:103 Signature def when_set ( self ): ... InputEnum Show source in inputs.py:107 Custom option single choice input to allow selecting enum values (or none). Signature class InputEnum ( OptionSingleChoice ): ... InputFloat Show source in inputs.py:82 Custom option input to only allow floating point input. Signature class InputFloat ( InputValidator , OptionFreeText ): ... See also InputValidator InputFloat().set Show source in inputs.py:86 Signature def set ( self , value ): ... InputInteger Show source in inputs.py:66 Custom option input to only allow integer input. Signature class InputInteger ( InputValidator , OptionFreeText ): ... See also InputValidator InputInteger().set Show source in inputs.py:70 Signature def set ( self , value ): ... InputMessage Show source in inputs.py:121 Custom option input for complex Message object input. Note that this class is empty as everything is handled by the parent OptionFreeText . It exists to allow generic input creation (see StubConfigInputsForm.create method). Signature class InputMessage ( OptionFreeText ): ... InputRepeated Show source in inputs.py:129 Custom option input for repeated input fields with type validation. Signature class InputRepeated ( InputValidator , OptionMultiFreeList ): def __init__ ( self , value_type : str , choices : Sequence [ str ] | None = None , * args , ** kwargs ): ... See also InputValidator InputRepeated().set Show source in inputs.py:142 Signature def set ( self , values ): ... InputString Show source in inputs.py:113 Custom option input for string input. Note that this class is empty as everything is handled by the parent OptionFreeText . It exists to allow generic input creation (see StubConfigInputsForm.create method). Signature class InputString ( OptionFreeText ): ... InputValidator Show source in inputs.py:29 Generic class for validating an option input with the return value of the set method. Overload the set(self, value) method and return True to keep editing, False to quit. Signature class InputValidator ( Option ): def __init__ ( self , multiline = False , * args , ** kwargs ): ... InputValidator().set_from_widget_value Show source in inputs.py:40 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook . Signature def set_from_widget_value ( self , vl ): ... InputsListDisplay Show source in inputs.py:18 Custom option list display for increased option title width. See npyscreen's documentation for reference. Signature class InputsListDisplay ( OptionListDisplay ): def __init__ ( self , * args , ** kwargs ): ... on_ok_input_validation_hook Show source in inputs.py:57 Hook to replace the on_ok event handler for validating an option input. It returns the value of the Option.set function to continue or stop the editing. Used to prevent entering invalid input for options. Signature def on_ok_input_validation_hook ( self ): ...","title":"Inputs"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputs","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Widgets / Inputs Auto-generated documentation for pyfirehose.config.ui.widgets.inputs module. Inputs InputBool InputBool().when_set InputEnum InputFloat InputFloat().set InputInteger InputInteger().set InputMessage InputRepeated InputRepeated().set InputString InputValidator InputValidator().set_from_widget_value InputsListDisplay on_ok_input_validation_hook","title":"Inputs"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputbool","text":"Show source in inputs.py:99 Custom option boolean input to convert string values to bool.","title":"InputBool"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature","text":"class InputBool ( OptionBoolean ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputboolwhen_set","text":"Show source in inputs.py:103","title":"InputBool().when_set"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_1","text":"def when_set ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputenum","text":"Show source in inputs.py:107 Custom option single choice input to allow selecting enum values (or none).","title":"InputEnum"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_2","text":"class InputEnum ( OptionSingleChoice ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputfloat","text":"Show source in inputs.py:82 Custom option input to only allow floating point input.","title":"InputFloat"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_3","text":"class InputFloat ( InputValidator , OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#see-also","text":"InputValidator","title":"See also"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputfloatset","text":"Show source in inputs.py:86","title":"InputFloat().set"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_4","text":"def set ( self , value ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputinteger","text":"Show source in inputs.py:66 Custom option input to only allow integer input.","title":"InputInteger"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_5","text":"class InputInteger ( InputValidator , OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#see-also_1","text":"InputValidator","title":"See also"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputintegerset","text":"Show source in inputs.py:70","title":"InputInteger().set"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_6","text":"def set ( self , value ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputmessage","text":"Show source in inputs.py:121 Custom option input for complex Message object input. Note that this class is empty as everything is handled by the parent OptionFreeText . It exists to allow generic input creation (see StubConfigInputsForm.create method).","title":"InputMessage"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_7","text":"class InputMessage ( OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputrepeated","text":"Show source in inputs.py:129 Custom option input for repeated input fields with type validation.","title":"InputRepeated"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_8","text":"class InputRepeated ( InputValidator , OptionMultiFreeList ): def __init__ ( self , value_type : str , choices : Sequence [ str ] | None = None , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#see-also_2","text":"InputValidator","title":"See also"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputrepeatedset","text":"Show source in inputs.py:142","title":"InputRepeated().set"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_9","text":"def set ( self , values ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputstring","text":"Show source in inputs.py:113 Custom option input for string input. Note that this class is empty as everything is handled by the parent OptionFreeText . It exists to allow generic input creation (see StubConfigInputsForm.create method).","title":"InputString"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_10","text":"class InputString ( OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputvalidator","text":"Show source in inputs.py:29 Generic class for validating an option input with the return value of the set method. Overload the set(self, value) method and return True to keep editing, False to quit.","title":"InputValidator"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_11","text":"class InputValidator ( Option ): def __init__ ( self , multiline = False , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputvalidatorset_from_widget_value","text":"Show source in inputs.py:40 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook .","title":"InputValidator().set_from_widget_value"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_12","text":"def set_from_widget_value ( self , vl ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#inputslistdisplay","text":"Show source in inputs.py:18 Custom option list display for increased option title width. See npyscreen's documentation for reference.","title":"InputsListDisplay"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_13","text":"class InputsListDisplay ( OptionListDisplay ): def __init__ ( self , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/inputs/#on_ok_input_validation_hook","text":"Show source in inputs.py:57 Hook to replace the on_ok event handler for validating an option input. It returns the value of the Option.set function to continue or stop the editing. Used to prevent entering invalid input for options.","title":"on_ok_input_validation_hook"},{"location":"pyfirehose/config/ui/widgets/inputs/#signature_14","text":"def on_ok_input_validation_hook ( self ): ...","title":"Signature"},{"location":"pyfirehose/tests/","text":"Tests Pyfirehose Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"},{"location":"pyfirehose/tests/#tests","text":"Pyfirehose Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"}]}