{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyfirehose Index Auto-generated documentation index. A full list of Pyfirehose project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Module Ui App Forms Widgets Utils Exceptions Tests Utils","title":"Pyfirehose Index"},{"location":"#pyfirehose-index","text":"Auto-generated documentation index. A full list of Pyfirehose project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Module Ui App Forms Widgets Utils Exceptions Tests Utils","title":"Pyfirehose Index"},{"location":"pyfirehose/","text":"Pyfirehose Pyfirehose Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules Modules Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Pyfirehose"},{"location":"pyfirehose/#pyfirehose","text":"Pyfirehose Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules","title":"Pyfirehose"},{"location":"pyfirehose/#modules","text":"Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Modules"},{"location":"pyfirehose/args/","text":"Args Pyfirehose Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments check_period Show source in args.py:12 Convert the specified period argument, from a integer or a date, to a block number. Arguments arg_period - A period argument from the ArgumentParser. Returns A integer representing the corresponding block number. Raises ArgumentTypeError - If the period cannot be parsed. Signature def check_period ( arg_period : str ) -> int : ... parse_arguments Show source in args.py:35 Setup the command line interface and return the parsed arguments. Returns A Namespace object containing the parsed arguments. Signature def parse_arguments () -> argparse . Namespace : ...","title":"Args"},{"location":"pyfirehose/args/#args","text":"Pyfirehose Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments","title":"Args"},{"location":"pyfirehose/args/#check_period","text":"Show source in args.py:12 Convert the specified period argument, from a integer or a date, to a block number.","title":"check_period"},{"location":"pyfirehose/args/#arguments","text":"arg_period - A period argument from the ArgumentParser.","title":"Arguments"},{"location":"pyfirehose/args/#returns","text":"A integer representing the corresponding block number.","title":"Returns"},{"location":"pyfirehose/args/#raises","text":"ArgumentTypeError - If the period cannot be parsed.","title":"Raises"},{"location":"pyfirehose/args/#signature","text":"def check_period ( arg_period : str ) -> int : ...","title":"Signature"},{"location":"pyfirehose/args/#parse_arguments","text":"Show source in args.py:35 Setup the command line interface and return the parsed arguments.","title":"parse_arguments"},{"location":"pyfirehose/args/#returns_1","text":"A Namespace object containing the parsed arguments.","title":"Returns"},{"location":"pyfirehose/args/#signature_1","text":"def parse_arguments () -> argparse . Namespace : ...","title":"Signature"},{"location":"pyfirehose/exceptions/","text":"Exceptions Pyfirehose Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException BlockStreamException Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed. Attributes start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing. Signature class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Exceptions"},{"location":"pyfirehose/exceptions/#exceptions","text":"Pyfirehose Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException","title":"Exceptions"},{"location":"pyfirehose/exceptions/#blockstreamexception","text":"Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed.","title":"BlockStreamException"},{"location":"pyfirehose/exceptions/#attributes","text":"start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing.","title":"Attributes"},{"location":"pyfirehose/exceptions/#signature","text":"class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Signature"},{"location":"pyfirehose/module/","text":"Module Pyfirehose Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main main Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop. Signature def main () -> int : ...","title":"Module"},{"location":"pyfirehose/module/#module","text":"Pyfirehose Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main","title":"Module"},{"location":"pyfirehose/module/#main","text":"Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop.","title":"main"},{"location":"pyfirehose/module/#signature","text":"def main () -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/","text":"Utils Pyfirehose Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num get_auth_token get_current_task_name import_all_from_module date_to_block_num Show source in utils.py:22 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days). Arguments date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified). Returns The block number associated with the given date time. Signature def date_to_block_num ( date : datetime , jwt : Optional [ str ] = None ) -> int : ... get_auth_token Show source in utils.py:78 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use. Arguments use_cache - A boolean enabling/disabling fetching the cache for the JWT token request. Returns The JWT token or an empty string if the request failed. Signature def get_auth_token ( use_cache : bool = True ) -> str : ... get_current_task_name Show source in utils.py:114 Helper function for generating a unique task id from an asyncio task. Signature def get_current_task_name () -> str : ... import_all_from_module Show source in utils.py:123 Dynamically import all python files located in the specified module's folder. Arguments module_name - Name of the module to import files from. Returns The list of imported modules. Signature def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ...","title":"Utils"},{"location":"pyfirehose/utils/#utils","text":"Pyfirehose Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num get_auth_token get_current_task_name import_all_from_module","title":"Utils"},{"location":"pyfirehose/utils/#date_to_block_num","text":"Show source in utils.py:22 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days).","title":"date_to_block_num"},{"location":"pyfirehose/utils/#arguments","text":"date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified).","title":"Arguments"},{"location":"pyfirehose/utils/#returns","text":"The block number associated with the given date time.","title":"Returns"},{"location":"pyfirehose/utils/#signature","text":"def date_to_block_num ( date : datetime , jwt : Optional [ str ] = None ) -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/#get_auth_token","text":"Show source in utils.py:78 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use.","title":"get_auth_token"},{"location":"pyfirehose/utils/#arguments_1","text":"use_cache - A boolean enabling/disabling fetching the cache for the JWT token request.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_1","text":"The JWT token or an empty string if the request failed.","title":"Returns"},{"location":"pyfirehose/utils/#signature_1","text":"def get_auth_token ( use_cache : bool = True ) -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#get_current_task_name","text":"Show source in utils.py:114 Helper function for generating a unique task id from an asyncio task.","title":"get_current_task_name"},{"location":"pyfirehose/utils/#signature_2","text":"def get_current_task_name () -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#import_all_from_module","text":"Show source in utils.py:123 Dynamically import all python files located in the specified module's folder.","title":"import_all_from_module"},{"location":"pyfirehose/utils/#arguments_2","text":"module_name - Name of the module to import files from.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_2","text":"The list of imported modules.","title":"Returns"},{"location":"pyfirehose/utils/#signature_3","text":"def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/","text":"Block Extractors Pyfirehose Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules Modules Async Multi Channel Async Optimized Async Single Channel Common","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#block-extractors","text":"Pyfirehose Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#modules","text":"Async Multi Channel Async Optimized Async Single Channel Common","title":"Modules"},{"location":"pyfirehose/block_extractors/async_multi_channel/","text":"Async Multi Channel Pyfirehose Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main asyncio_main Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#async-multi-channel","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#asyncio_main","text":"Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_multi_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_multi_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_multi_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_optimized/","text":"Async Optimized Pyfirehose Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main asyncio_main Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#async-optimized","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#asyncio_main","text":"Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_optimized/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_optimized/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_optimized/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_single_channel/","text":"Async Single Channel Pyfirehose Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main asyncio_main Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#async-single-channel","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#asyncio_main","text":"Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_single_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_single_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_single_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/","text":"Common Pyfirehose Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks get_secure_channel Show source in common.py:21 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors. Yields A grpc.aio.Channel as an asynchronous context manager. Signature @asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ... process_blocks Show source in common.py:46 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream. Arguments raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block. Returns A list of parsed data in the format returned by the block processor. Signature def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ... stream_blocks Show source in common.py:66 Return raw blocks (or parsed data) for the subset period between start and end . Arguments start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream. Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied. Raises BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number. Signature async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Optional [ Callable [[ Message ], dict ]] = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Common"},{"location":"pyfirehose/block_extractors/common/#common","text":"Pyfirehose Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks","title":"Common"},{"location":"pyfirehose/block_extractors/common/#get_secure_channel","text":"Show source in common.py:21 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors.","title":"get_secure_channel"},{"location":"pyfirehose/block_extractors/common/#yields","text":"A grpc.aio.Channel as an asynchronous context manager.","title":"Yields"},{"location":"pyfirehose/block_extractors/common/#signature","text":"@asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#process_blocks","text":"Show source in common.py:46 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream.","title":"process_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments","text":"raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns","text":"A list of parsed data in the format returned by the block processor.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#signature_1","text":"def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#stream_blocks","text":"Show source in common.py:66 Return raw blocks (or parsed data) for the subset period between start and end .","title":"stream_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments_1","text":"start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns_1","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#raises","text":"BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number.","title":"Raises"},{"location":"pyfirehose/block_extractors/common/#signature_2","text":"async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Optional [ Callable [[ Message ], dict ]] = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_processors/","text":"Block Processors Pyfirehose Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules Modules Processors","title":"Block Processors"},{"location":"pyfirehose/block_processors/#block-processors","text":"Pyfirehose Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules","title":"Block Processors"},{"location":"pyfirehose/block_processors/#modules","text":"Processors","title":"Modules"},{"location":"pyfirehose/block_processors/processors/","text":"Processors Pyfirehose Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_block_processor default_substreams_processor filtered_block_processor default_block_processor Show source in processors.py:62 Yield all the block data as a JSON-formatted dictionary. First unpacks the block and converts all its properties to JSON. Arguments raw_block - Raw block received from the gRPC stream. Yields A dictionary containing all the block's properties as defined in the proto files. Signature def default_block_processor ( raw_block : Message ) -> dict : ... default_substreams_processor Show source in processors.py:146 Yield the output of a substreams as JSON data, importing any types needed for parsing. Arguments data - output message from a substreams gRPC. Yields A dictionary representing the output data as JSON. Signature def default_substreams_processor ( data : Message ) -> dict : ... filtered_block_processor Show source in processors.py:80 Yield a all transactions from a gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream. Arguments raw_block - Raw block received from the gRPC stream. Yields A dictionary containing the filtered block data. Examples { \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" } Signature def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#processors","text":"Pyfirehose Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_block_processor default_substreams_processor filtered_block_processor","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#default_block_processor","text":"Show source in processors.py:62 Yield all the block data as a JSON-formatted dictionary. First unpacks the block and converts all its properties to JSON.","title":"default_block_processor"},{"location":"pyfirehose/block_processors/processors/#arguments","text":"raw_block - Raw block received from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields","text":"A dictionary containing all the block's properties as defined in the proto files.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#signature","text":"def default_block_processor ( raw_block : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/block_processors/processors/#default_substreams_processor","text":"Show source in processors.py:146 Yield the output of a substreams as JSON data, importing any types needed for parsing.","title":"default_substreams_processor"},{"location":"pyfirehose/block_processors/processors/#arguments_1","text":"data - output message from a substreams gRPC.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields_1","text":"A dictionary representing the output data as JSON.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#signature_1","text":"def default_substreams_processor ( data : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/block_processors/processors/#filtered_block_processor","text":"Show source in processors.py:80 Yield a all transactions from a gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream.","title":"filtered_block_processor"},{"location":"pyfirehose/block_processors/processors/#arguments_2","text":"raw_block - Raw block received from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields_2","text":"A dictionary containing the filtered block data.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#examples","text":"{ \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" }","title":"Examples"},{"location":"pyfirehose/block_processors/processors/#signature_2","text":"def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/config/","text":"Config Pyfirehose Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Modules Modules Module Ui Utils","title":"Config"},{"location":"pyfirehose/config/#config","text":"Pyfirehose Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Modules","title":"Config"},{"location":"pyfirehose/config/#modules","text":"Module Ui Utils","title":"Modules"},{"location":"pyfirehose/config/module/","text":"Module Pyfirehose Index / Pyfirehose / Config / Module Auto-generated documentation for pyfirehose.config. main module. Module","title":"Module"},{"location":"pyfirehose/config/module/#module","text":"Pyfirehose Index / Pyfirehose / Config / Module Auto-generated documentation for pyfirehose.config. main module. Module","title":"Module"},{"location":"pyfirehose/config/utils/","text":"Utils Pyfirehose Index / Pyfirehose / Config / Utils Auto-generated documentation for pyfirehose.config.utils module. Utils Config StubConfig load_config load_stub_config load_substreams_modules_from_package Config Show source in utils.py:33 Holds the main config. Signature class Config : ... StubConfig Show source in utils.py:22 Holds the stub config. Signature class StubConfig : ... load_config Show source in utils.py:47 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config. Arguments file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file. Returns A boolean indicating if the stub config file has also been loaded. Raises ArgumentTypeError - If the specified compression argument for a gRPC endpoint is not one of \"gzip\" or \"deflate\". HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file. Signature def load_config ( file : str , grpc_entry_id : Optional [ str ] = None ) -> bool : ... load_stub_config Show source in utils.py:128 Load the stub config from a file (str) or directly from a key-value dictionary. Arguments stub - The stub to load either as a filepath or a dictionary. Raises HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the specified stub or request object cannot be imported. KeyError - If a required key is missing from the config file. Signature def load_stub_config ( stub : str | dict ) -> None : ... load_substreams_modules_from_package Show source in utils.py:112 Parses substreams modules from an .spkg file. Arguments url - Local path to .spkg file. Returns A dictionary of modules available in the package file. Signature def load_substreams_modules_from_package ( url : str ) -> dict : ...","title":"Utils"},{"location":"pyfirehose/config/utils/#utils","text":"Pyfirehose Index / Pyfirehose / Config / Utils Auto-generated documentation for pyfirehose.config.utils module. Utils Config StubConfig load_config load_stub_config load_substreams_modules_from_package","title":"Utils"},{"location":"pyfirehose/config/utils/#config","text":"Show source in utils.py:33 Holds the main config.","title":"Config"},{"location":"pyfirehose/config/utils/#signature","text":"class Config : ...","title":"Signature"},{"location":"pyfirehose/config/utils/#stubconfig","text":"Show source in utils.py:22 Holds the stub config.","title":"StubConfig"},{"location":"pyfirehose/config/utils/#signature_1","text":"class StubConfig : ...","title":"Signature"},{"location":"pyfirehose/config/utils/#load_config","text":"Show source in utils.py:47 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config.","title":"load_config"},{"location":"pyfirehose/config/utils/#arguments","text":"file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file.","title":"Arguments"},{"location":"pyfirehose/config/utils/#returns","text":"A boolean indicating if the stub config file has also been loaded.","title":"Returns"},{"location":"pyfirehose/config/utils/#raises","text":"ArgumentTypeError - If the specified compression argument for a gRPC endpoint is not one of \"gzip\" or \"deflate\". HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/utils/#signature_2","text":"def load_config ( file : str , grpc_entry_id : Optional [ str ] = None ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/utils/#load_stub_config","text":"Show source in utils.py:128 Load the stub config from a file (str) or directly from a key-value dictionary.","title":"load_stub_config"},{"location":"pyfirehose/config/utils/#arguments_1","text":"stub - The stub to load either as a filepath or a dictionary.","title":"Arguments"},{"location":"pyfirehose/config/utils/#raises_1","text":"HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the specified stub or request object cannot be imported. KeyError - If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/utils/#signature_3","text":"def load_stub_config ( stub : str | dict ) -> None : ...","title":"Signature"},{"location":"pyfirehose/config/utils/#load_substreams_modules_from_package","text":"Show source in utils.py:112 Parses substreams modules from an .spkg file.","title":"load_substreams_modules_from_package"},{"location":"pyfirehose/config/utils/#arguments_2","text":"url - Local path to .spkg file.","title":"Arguments"},{"location":"pyfirehose/config/utils/#returns_1","text":"A dictionary of modules available in the package file.","title":"Returns"},{"location":"pyfirehose/config/utils/#signature_4","text":"def load_substreams_modules_from_package ( url : str ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/config/ui/","text":"Ui Pyfirehose Index / Pyfirehose / Config / Ui Auto-generated documentation for pyfirehose.config.ui module. Ui Modules Modules App Forms Widgets","title":"Ui"},{"location":"pyfirehose/config/ui/#ui","text":"Pyfirehose Index / Pyfirehose / Config / Ui Auto-generated documentation for pyfirehose.config.ui module. Ui Modules","title":"Ui"},{"location":"pyfirehose/config/ui/#modules","text":"App Forms Widgets","title":"Modules"},{"location":"pyfirehose/config/ui/app/","text":"App Pyfirehose Index / Pyfirehose / Config / Ui / App Auto-generated documentation for pyfirehose.config.ui.app module. App ConfigApp ConfigApp().onStart ConfigApp Show source in app.py:14 Main app containing the forms for the config GUI. It acts as a medium of communication for getting value between forms, storing data as instance attributes (via the self.parentApp variable available in child forms). See npyscreen's documentation for reference. Signature class ConfigApp ( NPSAppManaged ): def __init__ ( self ): ... ConfigApp().onStart Show source in app.py:44 Signature def onStart ( self ): ...","title":"App"},{"location":"pyfirehose/config/ui/app/#app","text":"Pyfirehose Index / Pyfirehose / Config / Ui / App Auto-generated documentation for pyfirehose.config.ui.app module. App ConfigApp ConfigApp().onStart","title":"App"},{"location":"pyfirehose/config/ui/app/#configapp","text":"Show source in app.py:14 Main app containing the forms for the config GUI. It acts as a medium of communication for getting value between forms, storing data as instance attributes (via the self.parentApp variable available in child forms). See npyscreen's documentation for reference.","title":"ConfigApp"},{"location":"pyfirehose/config/ui/app/#signature","text":"class ConfigApp ( NPSAppManaged ): def __init__ ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/app/#configapponstart","text":"Show source in app.py:44","title":"ConfigApp().onStart"},{"location":"pyfirehose/config/ui/app/#signature_1","text":"def onStart ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/","text":"Forms Pyfirehose Index / Pyfirehose / Config / Ui / Forms Auto-generated documentation for pyfirehose.config.ui.forms module. Forms ActionFormDiscard ActionFormDiscard().create_control_buttons ActionFormDiscard().on_discard ActionFormDiscard().whenPressed MainForm MainForm().afterEditing MainForm().beforeEditing MainForm().create MainForm().switch_form StubConfigConfirmEditForm StubConfigConfirmEditForm().create StubConfigConfirmEditForm().on_cancel StubConfigConfirmEditForm().on_discard StubConfigConfirmEditForm().on_ok StubConfigEndpointsForm StubConfigEndpointsForm().create StubConfigEndpointsForm().on_cancel StubConfigEndpointsForm().on_ok StubConfigInputsForm StubConfigInputsForm().create StubConfigInputsForm().on_cancel StubConfigInputsForm().on_ok StubConfigMethodsForm StubConfigMethodsForm().create StubConfigMethodsForm().on_cancel StubConfigMethodsForm().on_ok StubConfigSaveFileForm StubConfigSaveFileForm().create StubConfigSaveFileForm().on_cancel StubConfigSaveFileForm().on_ok StubConfigServicesForm StubConfigServicesForm().create StubConfigServicesForm().on_cancel StubConfigServicesForm().on_ok colorize mkcolor ActionFormDiscard Show source in forms.py:409 Parent class for an ActionFormV2 with an additional Discard button. Overload the on_discard method to customize its behavior. Signature class ActionFormDiscard ( ActionFormV2 , MiniButtonPress ): ... ActionFormDiscard().create_control_buttons Show source in forms.py:435 Signature def create_control_buttons ( self ): ... ActionFormDiscard().on_discard Show source in forms.py:460 Discard button hook to overload for customizing the behavior of the button. Signature def on_discard ( self ): ... ActionFormDiscard().whenPressed Show source in forms.py:419 Signature def whenPressed ( self ): ... MainForm Show source in forms.py:50 Main form presenting the main config file with a menu for accessing the edit functions. Attributes main_menu - holds the menu entries. next_form - describe the next form to be loaded after exiting the main form ( None exits the application). stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget. Signature class MainForm ( FormWithMenus ): ... MainForm().afterEditing Show source in forms.py:61 Called by npyscreen when the form is cycled out of the screen. Signature def afterEditing ( self ): ... MainForm().beforeEditing Show source in forms.py:67 Called by npyscreen before the form gets drawn on the screen. Signature def beforeEditing ( self ): ... MainForm().create Show source in forms.py:77 Signature def create ( self ): ... MainForm().switch_form Show source in forms.py:109 Helper function to set the next appropriate form when using the menu. Arguments form - the form name. Signature def switch_form ( self , form : str ) -> None : ... StubConfigConfirmEditForm Show source in forms.py:466 Confirmation screen displaying the final stub config as it will appear in the saved file. Attributes stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget. Signature class StubConfigConfirmEditForm ( ActionFormDiscard ): ... See also ActionFormDiscard StubConfigConfirmEditForm().create Show source in forms.py:473 Signature def create ( self ): ... StubConfigConfirmEditForm().on_cancel Show source in forms.py:511 Signature def on_cancel ( self ): ... StubConfigConfirmEditForm().on_discard Show source in forms.py:514 Signature def on_discard ( self ): ... StubConfigConfirmEditForm().on_ok Show source in forms.py:493 Signature def on_ok ( self ): ... StubConfigEndpointsForm Show source in forms.py:119 Choose an endpoint to edit or create a new the stub config for. Attributes ml_endpoints - an EndpointsTitleSelectOne widget to select an endpoint. Signature class StubConfigEndpointsForm ( ActionFormV2 ): ... StubConfigEndpointsForm().create Show source in forms.py:126 Signature def create ( self ): ... StubConfigEndpointsForm().on_cancel Show source in forms.py:145 Signature def on_cancel ( self ): ... StubConfigEndpointsForm().on_ok Show source in forms.py:135 Signature def on_ok ( self ): ... StubConfigInputsForm Show source in forms.py:279 Edit the request parameters sent to the gRPC endpoint. Input options will be created according to their expected types (bool -> InputBoolean , etc.). Attributes w_inputs - an InputsListDisplay widget to present the list of input options. Signature class StubConfigInputsForm ( ActionFormV2 ): ... StubConfigInputsForm().create Show source in forms.py:288 Signature def create ( self ): ... StubConfigInputsForm().on_cancel Show source in forms.py:404 Signature def on_cancel ( self ): ... StubConfigInputsForm().on_ok Show source in forms.py:385 Signature def on_ok ( self ): ... StubConfigMethodsForm Show source in forms.py:243 Choose a gRPC method from the specified service. Attributes methods - available methods provided by the reflection service. ml_services - a TitleSelectOne widget to select which method the stub will use. Signature class StubConfigMethodsForm ( ActionFormV2 ): ... StubConfigMethodsForm().create Show source in forms.py:251 Signature def create ( self ): ... StubConfigMethodsForm().on_cancel Show source in forms.py:276 Signature def on_cancel ( self ): ... StubConfigMethodsForm().on_ok Show source in forms.py:263 Signature def on_ok ( self ): ... StubConfigSaveFileForm Show source in forms.py:148 Choose the save file location for the stub config. Attributes stub_loaded - indicates if the stub has been loaded from the specified file. tfc_stub_save_file - a TitleFilenameCombo widget to select the stub save file. Signature class StubConfigSaveFileForm ( ActionFormV2 ): ... StubConfigSaveFileForm().create Show source in forms.py:156 Signature def create ( self ): ... StubConfigSaveFileForm().on_cancel Show source in forms.py:199 Signature def on_cancel ( self ): ... StubConfigSaveFileForm().on_ok Show source in forms.py:172 Signature def on_ok ( self ): ... StubConfigServicesForm Show source in forms.py:202 Choose a service from the services available on the specified endpoint. The endpoint has to provide a reflection service in order to determine the available services. Attributes ml_services - a TitleSelectOne widget to select which service the stub will use. Signature class StubConfigServicesForm ( ActionFormV2 ): ... StubConfigServicesForm().create Show source in forms.py:211 Signature def create ( self ): ... StubConfigServicesForm().on_cancel Show source in forms.py:240 Signature def on_cancel ( self ): ... StubConfigServicesForm().on_ok Show source in forms.py:230 Signature def on_ok ( self ): ... colorize Show source in forms.py:566 Convert a string containg ANSI escape codes to curses control characters for color display. Adapted from Cansi library (https://github.com/tslight/cansi). Some of the original kept in the code. Arguments default_color - passed to the mkcolors function (see documentation for reference). string - a string containing ANSI escape codes for color. Returns A list of pairs of curses 's control character and their applicable length. Examples [(2097152, 10)] will color 10 characters bold ( curses.A_BOLD = 2097152 ). Signature def colorize ( default_color : int , string : str ) -> list [ tuple [ int , int ]]: ... mkcolor Show source in forms.py:526 Initialize curses colors and mapping of ANSI escape codes. Adapted from Cansi library (https://github.com/tslight/cansi). Original comments kept in code. See Wikipedia for ANSI escape codes reference. Arguments default_color - color pair used for the default background and foreground ANSI escape codes (\"39;49;00\"). offset - offset for the curses.init_pair function to avoid overwriting predefined colors of npyscreen 's theme. Returns A dictionary mapping of ANSI escape sequences to curses 's control characters. Signature def mkcolor ( default_color : int , offset : Optional [ int ] = 49 ) -> dict [ str , int ]: ...","title":"Forms"},{"location":"pyfirehose/config/ui/forms/#forms","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Forms Auto-generated documentation for pyfirehose.config.ui.forms module. Forms ActionFormDiscard ActionFormDiscard().create_control_buttons ActionFormDiscard().on_discard ActionFormDiscard().whenPressed MainForm MainForm().afterEditing MainForm().beforeEditing MainForm().create MainForm().switch_form StubConfigConfirmEditForm StubConfigConfirmEditForm().create StubConfigConfirmEditForm().on_cancel StubConfigConfirmEditForm().on_discard StubConfigConfirmEditForm().on_ok StubConfigEndpointsForm StubConfigEndpointsForm().create StubConfigEndpointsForm().on_cancel StubConfigEndpointsForm().on_ok StubConfigInputsForm StubConfigInputsForm().create StubConfigInputsForm().on_cancel StubConfigInputsForm().on_ok StubConfigMethodsForm StubConfigMethodsForm().create StubConfigMethodsForm().on_cancel StubConfigMethodsForm().on_ok StubConfigSaveFileForm StubConfigSaveFileForm().create StubConfigSaveFileForm().on_cancel StubConfigSaveFileForm().on_ok StubConfigServicesForm StubConfigServicesForm().create StubConfigServicesForm().on_cancel StubConfigServicesForm().on_ok colorize mkcolor","title":"Forms"},{"location":"pyfirehose/config/ui/forms/#actionformdiscard","text":"Show source in forms.py:409 Parent class for an ActionFormV2 with an additional Discard button. Overload the on_discard method to customize its behavior.","title":"ActionFormDiscard"},{"location":"pyfirehose/config/ui/forms/#signature","text":"class ActionFormDiscard ( ActionFormV2 , MiniButtonPress ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#actionformdiscardcreate_control_buttons","text":"Show source in forms.py:435","title":"ActionFormDiscard().create_control_buttons"},{"location":"pyfirehose/config/ui/forms/#signature_1","text":"def create_control_buttons ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#actionformdiscardon_discard","text":"Show source in forms.py:460 Discard button hook to overload for customizing the behavior of the button.","title":"ActionFormDiscard().on_discard"},{"location":"pyfirehose/config/ui/forms/#signature_2","text":"def on_discard ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#actionformdiscardwhenpressed","text":"Show source in forms.py:419","title":"ActionFormDiscard().whenPressed"},{"location":"pyfirehose/config/ui/forms/#signature_3","text":"def whenPressed ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mainform","text":"Show source in forms.py:50 Main form presenting the main config file with a menu for accessing the edit functions.","title":"MainForm"},{"location":"pyfirehose/config/ui/forms/#attributes","text":"main_menu - holds the menu entries. next_form - describe the next form to be loaded after exiting the main form ( None exits the application). stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_4","text":"class MainForm ( FormWithMenus ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mainformafterediting","text":"Show source in forms.py:61 Called by npyscreen when the form is cycled out of the screen.","title":"MainForm().afterEditing"},{"location":"pyfirehose/config/ui/forms/#signature_5","text":"def afterEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mainformbeforeediting","text":"Show source in forms.py:67 Called by npyscreen before the form gets drawn on the screen.","title":"MainForm().beforeEditing"},{"location":"pyfirehose/config/ui/forms/#signature_6","text":"def beforeEditing ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mainformcreate","text":"Show source in forms.py:77","title":"MainForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_7","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mainformswitch_form","text":"Show source in forms.py:109 Helper function to set the next appropriate form when using the menu.","title":"MainForm().switch_form"},{"location":"pyfirehose/config/ui/forms/#arguments","text":"form - the form name.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/#signature_8","text":"def switch_form ( self , form : str ) -> None : ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigconfirmeditform","text":"Show source in forms.py:466 Confirmation screen displaying the final stub config as it will appear in the saved file.","title":"StubConfigConfirmEditForm"},{"location":"pyfirehose/config/ui/forms/#attributes_1","text":"stored_highlights - dictionary containing the highlighted text content for the CodeHighlightedTitlePager widget.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_9","text":"class StubConfigConfirmEditForm ( ActionFormDiscard ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#see-also","text":"ActionFormDiscard","title":"See also"},{"location":"pyfirehose/config/ui/forms/#stubconfigconfirmeditformcreate","text":"Show source in forms.py:473","title":"StubConfigConfirmEditForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_10","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigconfirmeditformon_cancel","text":"Show source in forms.py:511","title":"StubConfigConfirmEditForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_11","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigconfirmeditformon_discard","text":"Show source in forms.py:514","title":"StubConfigConfirmEditForm().on_discard"},{"location":"pyfirehose/config/ui/forms/#signature_12","text":"def on_discard ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigconfirmeditformon_ok","text":"Show source in forms.py:493","title":"StubConfigConfirmEditForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_13","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigendpointsform","text":"Show source in forms.py:119 Choose an endpoint to edit or create a new the stub config for.","title":"StubConfigEndpointsForm"},{"location":"pyfirehose/config/ui/forms/#attributes_2","text":"ml_endpoints - an EndpointsTitleSelectOne widget to select an endpoint.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_14","text":"class StubConfigEndpointsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigendpointsformcreate","text":"Show source in forms.py:126","title":"StubConfigEndpointsForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_15","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigendpointsformon_cancel","text":"Show source in forms.py:145","title":"StubConfigEndpointsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_16","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigendpointsformon_ok","text":"Show source in forms.py:135","title":"StubConfigEndpointsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_17","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfiginputsform","text":"Show source in forms.py:279 Edit the request parameters sent to the gRPC endpoint. Input options will be created according to their expected types (bool -> InputBoolean , etc.).","title":"StubConfigInputsForm"},{"location":"pyfirehose/config/ui/forms/#attributes_3","text":"w_inputs - an InputsListDisplay widget to present the list of input options.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_18","text":"class StubConfigInputsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfiginputsformcreate","text":"Show source in forms.py:288","title":"StubConfigInputsForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_19","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfiginputsformon_cancel","text":"Show source in forms.py:404","title":"StubConfigInputsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_20","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfiginputsformon_ok","text":"Show source in forms.py:385","title":"StubConfigInputsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_21","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigmethodsform","text":"Show source in forms.py:243 Choose a gRPC method from the specified service.","title":"StubConfigMethodsForm"},{"location":"pyfirehose/config/ui/forms/#attributes_4","text":"methods - available methods provided by the reflection service. ml_services - a TitleSelectOne widget to select which method the stub will use.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_22","text":"class StubConfigMethodsForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigmethodsformcreate","text":"Show source in forms.py:251","title":"StubConfigMethodsForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_23","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigmethodsformon_cancel","text":"Show source in forms.py:276","title":"StubConfigMethodsForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_24","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigmethodsformon_ok","text":"Show source in forms.py:263","title":"StubConfigMethodsForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_25","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigsavefileform","text":"Show source in forms.py:148 Choose the save file location for the stub config.","title":"StubConfigSaveFileForm"},{"location":"pyfirehose/config/ui/forms/#attributes_5","text":"stub_loaded - indicates if the stub has been loaded from the specified file. tfc_stub_save_file - a TitleFilenameCombo widget to select the stub save file.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_26","text":"class StubConfigSaveFileForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigsavefileformcreate","text":"Show source in forms.py:156","title":"StubConfigSaveFileForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_27","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigsavefileformon_cancel","text":"Show source in forms.py:199","title":"StubConfigSaveFileForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_28","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigsavefileformon_ok","text":"Show source in forms.py:172","title":"StubConfigSaveFileForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_29","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigservicesform","text":"Show source in forms.py:202 Choose a service from the services available on the specified endpoint. The endpoint has to provide a reflection service in order to determine the available services.","title":"StubConfigServicesForm"},{"location":"pyfirehose/config/ui/forms/#attributes_6","text":"ml_services - a TitleSelectOne widget to select which service the stub will use.","title":"Attributes"},{"location":"pyfirehose/config/ui/forms/#signature_30","text":"class StubConfigServicesForm ( ActionFormV2 ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigservicesformcreate","text":"Show source in forms.py:211","title":"StubConfigServicesForm().create"},{"location":"pyfirehose/config/ui/forms/#signature_31","text":"def create ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigservicesformon_cancel","text":"Show source in forms.py:240","title":"StubConfigServicesForm().on_cancel"},{"location":"pyfirehose/config/ui/forms/#signature_32","text":"def on_cancel ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#stubconfigservicesformon_ok","text":"Show source in forms.py:230","title":"StubConfigServicesForm().on_ok"},{"location":"pyfirehose/config/ui/forms/#signature_33","text":"def on_ok ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#colorize","text":"Show source in forms.py:566 Convert a string containg ANSI escape codes to curses control characters for color display. Adapted from Cansi library (https://github.com/tslight/cansi). Some of the original kept in the code.","title":"colorize"},{"location":"pyfirehose/config/ui/forms/#arguments_1","text":"default_color - passed to the mkcolors function (see documentation for reference). string - a string containing ANSI escape codes for color.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/#returns","text":"A list of pairs of curses 's control character and their applicable length.","title":"Returns"},{"location":"pyfirehose/config/ui/forms/#examples","text":"[(2097152, 10)] will color 10 characters bold ( curses.A_BOLD = 2097152 ).","title":"Examples"},{"location":"pyfirehose/config/ui/forms/#signature_34","text":"def colorize ( default_color : int , string : str ) -> list [ tuple [ int , int ]]: ...","title":"Signature"},{"location":"pyfirehose/config/ui/forms/#mkcolor","text":"Show source in forms.py:526 Initialize curses colors and mapping of ANSI escape codes. Adapted from Cansi library (https://github.com/tslight/cansi). Original comments kept in code. See Wikipedia for ANSI escape codes reference.","title":"mkcolor"},{"location":"pyfirehose/config/ui/forms/#arguments_2","text":"default_color - color pair used for the default background and foreground ANSI escape codes (\"39;49;00\"). offset - offset for the curses.init_pair function to avoid overwriting predefined colors of npyscreen 's theme.","title":"Arguments"},{"location":"pyfirehose/config/ui/forms/#returns_1","text":"A dictionary mapping of ANSI escape sequences to curses 's control characters.","title":"Returns"},{"location":"pyfirehose/config/ui/forms/#signature_35","text":"def mkcolor ( default_color : int , offset : Optional [ int ] = 49 ) -> dict [ str , int ]: ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/","text":"Widgets Pyfirehose Index / Pyfirehose / Config / Ui / Widgets Auto-generated documentation for pyfirehose.config.ui.widgets module. Widgets CodeHighlightedPager CodeHighlightedTextfield CodeHighlightedTextfield().update_highlighting CodeHighlightedTitlePager EndpointsSelectOne EndpointsSelectOne().display_value EndpointsTitleSelectOne InputBoolean InputBoolean().when_set InputFloat InputFloat().set InputFloat().set_from_widget_value InputInteger InputInteger().set InputInteger().set_from_widget_value InputsListDisplay on_ok_input_validation_hook CodeHighlightedPager Show source in widgets.py:39 Syntax highlight enabled Pager using CodeHighlightedTextfield as line display. Signature class CodeHighlightedPager ( Pager ): ... CodeHighlightedTextfield Show source in widgets.py:12 Syntax highlight enabled Textfield for displaying JSON config files. Attributes _highlightingdata - internal array specifying special control characters for curses to display colors. syntax_highlighting - enable syntax highlight for npyscreen to call the update_highlight method on redraw. Signature class CodeHighlightedTextfield ( Textfield ): def __init__ ( self , * args , ** kwargs ): ... CodeHighlightedTextfield().update_highlighting Show source in widgets.py:25 Called on every call to the internal _print function. See Textfield implementation for details Signature def update_highlighting ( self , start = None , end = None , clear = False ): ... CodeHighlightedTitlePager Show source in widgets.py:46 Titled version of the CodeHighlightedPager . See npyscreen's documentation for reference. Signature class CodeHighlightedTitlePager ( TitlePager ): ... EndpointsSelectOne Show source in widgets.py:55 Custom single selection widget to display main config's endpoint data. See npyscreen's documentation for reference. Signature class EndpointsSelectOne ( SelectOne ): ... EndpointsSelectOne().display_value Show source in widgets.py:62 Signature def display_value ( self , vl : dict ): ... EndpointsTitleSelectOne Show source in widgets.py:68 Title version of the EndpointsSelectOne . See npyscreen's documentation for reference. Signature class EndpointsTitleSelectOne ( TitleSelectOne ): ... InputBoolean Show source in widgets.py:88 Custom option boolean input to convert string values to bool. Signature class InputBoolean ( OptionBoolean ): ... InputBoolean().when_set Show source in widgets.py:92 Signature def when_set ( self ): ... InputFloat Show source in widgets.py:96 Custom option input to only allow floating point input. Signature class InputFloat ( OptionFreeText ): ... InputFloat().set Show source in widgets.py:100 Signature def set ( self , value ): ... InputFloat().set_from_widget_value Show source in widgets.py:115 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook . Signature def set_from_widget_value ( self , vl ): ... InputInteger Show source in widgets.py:132 Custom option input to only allow integer input. Signature class InputInteger ( OptionFreeText ): ... InputInteger().set Show source in widgets.py:136 Signature def set ( self , value ): ... InputInteger().set_from_widget_value Show source in widgets.py:152 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook . Signature def set_from_widget_value ( self , vl ): ... InputsListDisplay Show source in widgets.py:77 Custom option list display for increased option title width. See npyscreen's documentation for reference. Signature class InputsListDisplay ( OptionListDisplay ): def __init__ ( self , * args , ** kwargs ): ... on_ok_input_validation_hook Show source in widgets.py:169 Hook to replace the on_ok event handler for validating an option input. It returns the value of the Option.set function to continue or stop the editing. Used to prevent entering invalid input for options. Signature def on_ok_input_validation_hook ( self ): ...","title":"Widgets"},{"location":"pyfirehose/config/ui/widgets/#widgets","text":"Pyfirehose Index / Pyfirehose / Config / Ui / Widgets Auto-generated documentation for pyfirehose.config.ui.widgets module. Widgets CodeHighlightedPager CodeHighlightedTextfield CodeHighlightedTextfield().update_highlighting CodeHighlightedTitlePager EndpointsSelectOne EndpointsSelectOne().display_value EndpointsTitleSelectOne InputBoolean InputBoolean().when_set InputFloat InputFloat().set InputFloat().set_from_widget_value InputInteger InputInteger().set InputInteger().set_from_widget_value InputsListDisplay on_ok_input_validation_hook","title":"Widgets"},{"location":"pyfirehose/config/ui/widgets/#codehighlightedpager","text":"Show source in widgets.py:39 Syntax highlight enabled Pager using CodeHighlightedTextfield as line display.","title":"CodeHighlightedPager"},{"location":"pyfirehose/config/ui/widgets/#signature","text":"class CodeHighlightedPager ( Pager ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#codehighlightedtextfield","text":"Show source in widgets.py:12 Syntax highlight enabled Textfield for displaying JSON config files.","title":"CodeHighlightedTextfield"},{"location":"pyfirehose/config/ui/widgets/#attributes","text":"_highlightingdata - internal array specifying special control characters for curses to display colors. syntax_highlighting - enable syntax highlight for npyscreen to call the update_highlight method on redraw.","title":"Attributes"},{"location":"pyfirehose/config/ui/widgets/#signature_1","text":"class CodeHighlightedTextfield ( Textfield ): def __init__ ( self , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#codehighlightedtextfieldupdate_highlighting","text":"Show source in widgets.py:25 Called on every call to the internal _print function. See Textfield implementation for details","title":"CodeHighlightedTextfield().update_highlighting"},{"location":"pyfirehose/config/ui/widgets/#signature_2","text":"def update_highlighting ( self , start = None , end = None , clear = False ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#codehighlightedtitlepager","text":"Show source in widgets.py:46 Titled version of the CodeHighlightedPager . See npyscreen's documentation for reference.","title":"CodeHighlightedTitlePager"},{"location":"pyfirehose/config/ui/widgets/#signature_3","text":"class CodeHighlightedTitlePager ( TitlePager ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#endpointsselectone","text":"Show source in widgets.py:55 Custom single selection widget to display main config's endpoint data. See npyscreen's documentation for reference.","title":"EndpointsSelectOne"},{"location":"pyfirehose/config/ui/widgets/#signature_4","text":"class EndpointsSelectOne ( SelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#endpointsselectonedisplay_value","text":"Show source in widgets.py:62","title":"EndpointsSelectOne().display_value"},{"location":"pyfirehose/config/ui/widgets/#signature_5","text":"def display_value ( self , vl : dict ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#endpointstitleselectone","text":"Show source in widgets.py:68 Title version of the EndpointsSelectOne . See npyscreen's documentation for reference.","title":"EndpointsTitleSelectOne"},{"location":"pyfirehose/config/ui/widgets/#signature_6","text":"class EndpointsTitleSelectOne ( TitleSelectOne ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputboolean","text":"Show source in widgets.py:88 Custom option boolean input to convert string values to bool.","title":"InputBoolean"},{"location":"pyfirehose/config/ui/widgets/#signature_7","text":"class InputBoolean ( OptionBoolean ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputbooleanwhen_set","text":"Show source in widgets.py:92","title":"InputBoolean().when_set"},{"location":"pyfirehose/config/ui/widgets/#signature_8","text":"def when_set ( self ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputfloat","text":"Show source in widgets.py:96 Custom option input to only allow floating point input.","title":"InputFloat"},{"location":"pyfirehose/config/ui/widgets/#signature_9","text":"class InputFloat ( OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputfloatset","text":"Show source in widgets.py:100","title":"InputFloat().set"},{"location":"pyfirehose/config/ui/widgets/#signature_10","text":"def set ( self , value ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputfloatset_from_widget_value","text":"Show source in widgets.py:115 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook .","title":"InputFloat().set_from_widget_value"},{"location":"pyfirehose/config/ui/widgets/#signature_11","text":"def set_from_widget_value ( self , vl ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputinteger","text":"Show source in widgets.py:132 Custom option input to only allow integer input.","title":"InputInteger"},{"location":"pyfirehose/config/ui/widgets/#signature_12","text":"class InputInteger ( OptionFreeText ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputintegerset","text":"Show source in widgets.py:136","title":"InputInteger().set"},{"location":"pyfirehose/config/ui/widgets/#signature_13","text":"def set ( self , value ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputintegerset_from_widget_value","text":"Show source in widgets.py:152 Method override allowing to quit or continue the option editing depending on the return value. See on_ok_input_validation_hook .","title":"InputInteger().set_from_widget_value"},{"location":"pyfirehose/config/ui/widgets/#signature_14","text":"def set_from_widget_value ( self , vl ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#inputslistdisplay","text":"Show source in widgets.py:77 Custom option list display for increased option title width. See npyscreen's documentation for reference.","title":"InputsListDisplay"},{"location":"pyfirehose/config/ui/widgets/#signature_15","text":"class InputsListDisplay ( OptionListDisplay ): def __init__ ( self , * args , ** kwargs ): ...","title":"Signature"},{"location":"pyfirehose/config/ui/widgets/#on_ok_input_validation_hook","text":"Show source in widgets.py:169 Hook to replace the on_ok event handler for validating an option input. It returns the value of the Option.set function to continue or stop the editing. Used to prevent entering invalid input for options.","title":"on_ok_input_validation_hook"},{"location":"pyfirehose/config/ui/widgets/#signature_16","text":"def on_ok_input_validation_hook ( self ): ...","title":"Signature"},{"location":"pyfirehose/tests/","text":"Tests Pyfirehose Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"},{"location":"pyfirehose/tests/#tests","text":"Pyfirehose Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"}]}