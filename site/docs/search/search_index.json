{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eos-blockchain-data Index Auto-generated documentation index. A full list of Eos-blockchain-data project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Exceptions Tests Utils","title":"Eos-blockchain-data Index"},{"location":"#eos-blockchain-data-index","text":"Auto-generated documentation index. A full list of Eos-blockchain-data project modules. Pyfirehose Module Args Block Extractors Async Multi Channel Async Optimized Async Single Channel Common Block Processors Processors Config Exceptions Tests Utils","title":"Eos-blockchain-data Index"},{"location":"pyfirehose/","text":"Pyfirehose Eos-blockchain-data Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules Modules Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Pyfirehose"},{"location":"pyfirehose/#pyfirehose","text":"Eos-blockchain-data Index / Pyfirehose Auto-generated documentation for pyfirehose module. Pyfirehose Modules","title":"Pyfirehose"},{"location":"pyfirehose/#modules","text":"Module Args Block Extractors Block Processors Config Exceptions Tests Utils","title":"Modules"},{"location":"pyfirehose/args/","text":"Args Eos-blockchain-data Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments check_period Show source in args.py:12 Convert the specified period argument, from a integer or a date, to a block number. Arguments arg_period - A period argument from the ArgumentParser. Returns A integer representing the corresponding block number. Raises ArgumentTypeError - If the period cannot be parsed. Signature def check_period ( arg_period : str ) -> int : ... parse_arguments Show source in args.py:35 Setup the command line interface and return the parsed arguments. Returns A Namespace object containing the parsed arguments. Signature def parse_arguments () -> argparse . Namespace : ...","title":"Args"},{"location":"pyfirehose/args/#args","text":"Eos-blockchain-data Index / Pyfirehose / Args Auto-generated documentation for pyfirehose.args module. Args check_period parse_arguments","title":"Args"},{"location":"pyfirehose/args/#check_period","text":"Show source in args.py:12 Convert the specified period argument, from a integer or a date, to a block number.","title":"check_period"},{"location":"pyfirehose/args/#arguments","text":"arg_period - A period argument from the ArgumentParser.","title":"Arguments"},{"location":"pyfirehose/args/#returns","text":"A integer representing the corresponding block number.","title":"Returns"},{"location":"pyfirehose/args/#raises","text":"ArgumentTypeError - If the period cannot be parsed.","title":"Raises"},{"location":"pyfirehose/args/#signature","text":"def check_period ( arg_period : str ) -> int : ...","title":"Signature"},{"location":"pyfirehose/args/#parse_arguments","text":"Show source in args.py:35 Setup the command line interface and return the parsed arguments.","title":"parse_arguments"},{"location":"pyfirehose/args/#returns_1","text":"A Namespace object containing the parsed arguments.","title":"Returns"},{"location":"pyfirehose/args/#signature_1","text":"def parse_arguments () -> argparse . Namespace : ...","title":"Signature"},{"location":"pyfirehose/config/","text":"Config Eos-blockchain-data Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Config StubConfig load_config load_stub_config Config Show source in config.py:30 Holds the main config. Signature class Config : ... StubConfig Show source in config.py:21 Holds the stub config. Signature class StubConfig : ... load_config Show source in config.py:44 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config. Arguments file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file. Returns A boolean indicating if the stub config file has also been loaded. Raises ArgumentTypeError - If the specified compression argument for a gRPC endpoint is not one of \"gzip\" or \"deflate\". HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file. Signature def load_config ( file : str , grpc_entry_id : Optional [ str ] = None ) -> bool : ... load_stub_config Show source in config.py:109 Load the stub config from a file (str) or directly from a key-value dictionary. Arguments stub: The stub to load either as a filepath or a dictionary. Raises HjsonDecodeError: If the hjson module fails to parse the config file. ImportError: If the specified stub or request object cannot be imported. KeyError: If a required key is missing from the config file. Signature def load_stub_config ( stub : str | dict ) -> None : ...","title":"Config"},{"location":"pyfirehose/config/#config","text":"Eos-blockchain-data Index / Pyfirehose / Config Auto-generated documentation for pyfirehose.config module. Config Config StubConfig load_config load_stub_config","title":"Config"},{"location":"pyfirehose/config/#config_1","text":"Show source in config.py:30 Holds the main config.","title":"Config"},{"location":"pyfirehose/config/#signature","text":"class Config : ...","title":"Signature"},{"location":"pyfirehose/config/#stubconfig","text":"Show source in config.py:21 Holds the stub config.","title":"StubConfig"},{"location":"pyfirehose/config/#signature_1","text":"class StubConfig : ...","title":"Signature"},{"location":"pyfirehose/config/#load_config","text":"Show source in config.py:44 Load the main config from the specified file. If a gRPC entry id is specified, it overwrites the default specified in the config.","title":"load_config"},{"location":"pyfirehose/config/#arguments","text":"file - Filepath to the main config file. grpc_entry_id - Id of a gRPC entry present in the \"grpc\" array of the main config file.","title":"Arguments"},{"location":"pyfirehose/config/#returns","text":"A boolean indicating if the stub config file has also been loaded.","title":"Returns"},{"location":"pyfirehose/config/#raises","text":"ArgumentTypeError - If the specified compression argument for a gRPC endpoint is not one of \"gzip\" or \"deflate\". HjsonDecodeError - If the hjson module fails to parse the config file. ImportError - If the stub config files fails to import the specified modules. KeyError - If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/#signature_2","text":"def load_config ( file : str , grpc_entry_id : Optional [ str ] = None ) -> bool : ...","title":"Signature"},{"location":"pyfirehose/config/#load_stub_config","text":"Show source in config.py:109 Load the stub config from a file (str) or directly from a key-value dictionary.","title":"load_stub_config"},{"location":"pyfirehose/config/#arguments_1","text":"stub: The stub to load either as a filepath or a dictionary.","title":"Arguments"},{"location":"pyfirehose/config/#raises_1","text":"HjsonDecodeError: If the hjson module fails to parse the config file. ImportError: If the specified stub or request object cannot be imported. KeyError: If a required key is missing from the config file.","title":"Raises"},{"location":"pyfirehose/config/#signature_3","text":"def load_stub_config ( stub : str | dict ) -> None : ...","title":"Signature"},{"location":"pyfirehose/exceptions/","text":"Exceptions Eos-blockchain-data Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException BlockStreamException Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed. Attributes start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing. Signature class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Exceptions"},{"location":"pyfirehose/exceptions/#exceptions","text":"Eos-blockchain-data Index / Pyfirehose / Exceptions Auto-generated documentation for pyfirehose.exceptions module. Exceptions BlockStreamException","title":"Exceptions"},{"location":"pyfirehose/exceptions/#blockstreamexception","text":"Show source in exceptions.py:7 Thrown by a task when failing to process a block. The information will be used to start another task for the remaining blocks to be processed.","title":"BlockStreamException"},{"location":"pyfirehose/exceptions/#attributes","text":"start - The block stream's starting block. end - The block stream's ending block. failed - The block that failed processing.","title":"Attributes"},{"location":"pyfirehose/exceptions/#signature","text":"class BlockStreamException ( Exception ): def __init__ ( self , start : int , end : int , failed : int ) -> None : ...","title":"Signature"},{"location":"pyfirehose/module/","text":"Module Eos-blockchain-data Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main main Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop. Signature def main () -> int : ...","title":"Module"},{"location":"pyfirehose/module/#module","text":"Eos-blockchain-data Index / Pyfirehose / Module Auto-generated documentation for pyfirehose. main module. Module main","title":"Module"},{"location":"pyfirehose/module/#main","text":"Show source in main .py:28 Main function for parsing arguments, setting up logging and running asyncio main loop.","title":"main"},{"location":"pyfirehose/module/#signature","text":"def main () -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/","text":"Utils Eos-blockchain-data Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num get_auth_token get_current_task_name import_all_from_module date_to_block_num Show source in utils.py:22 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days). Arguments date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified). Returns The block number associated with the given date time. Signature def date_to_block_num ( date : datetime , jwt : Optional [ str ] = None ) -> int : ... get_auth_token Show source in utils.py:77 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use. Arguments use_cache - A boolean enabling/disabling fetching the cache for the JWT token request. Returns The JWT token or an empty string if the request failed. Signature def get_auth_token ( use_cache : bool = True ) -> str : ... get_current_task_name Show source in utils.py:113 Helper function for generating a unique task id from an asyncio task. Signature def get_current_task_name () -> str : ... import_all_from_module Show source in utils.py:122 Dynamically import all python files located in the specified module's folder. Arguments module_name - Name of the module to import files from. Returns The list of imported modules. Signature def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ...","title":"Utils"},{"location":"pyfirehose/utils/#utils","text":"Eos-blockchain-data Index / Pyfirehose / Utils Auto-generated documentation for pyfirehose.utils module. Utils date_to_block_num get_auth_token get_current_task_name import_all_from_module","title":"Utils"},{"location":"pyfirehose/utils/#date_to_block_num","text":"Show source in utils.py:22 Query the graphql_endpoint specified in the main config file for the block number associated with a given date time. Cache the results for the duration specified in the main config file ( graphql_cache , default is 30 days).","title":"date_to_block_num"},{"location":"pyfirehose/utils/#arguments","text":"date - A date to retrieve the associated block number. jwt - A JWT token used for authenticating with the GraphQL API (will be fetched automatically if not specified).","title":"Arguments"},{"location":"pyfirehose/utils/#returns","text":"The block number associated with the given date time.","title":"Returns"},{"location":"pyfirehose/utils/#signature","text":"def date_to_block_num ( date : datetime , jwt : Optional [ str ] = None ) -> int : ...","title":"Signature"},{"location":"pyfirehose/utils/#get_auth_token","text":"Show source in utils.py:77 Fetch a JWT authorization token from the authentication endpoints defined in the main config file. Cache the token for 24-hour use.","title":"get_auth_token"},{"location":"pyfirehose/utils/#arguments_1","text":"use_cache - A boolean enabling/disabling fetching the cache for the JWT token request.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_1","text":"The JWT token or an empty string if the request failed.","title":"Returns"},{"location":"pyfirehose/utils/#signature_1","text":"def get_auth_token ( use_cache : bool = True ) -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#get_current_task_name","text":"Show source in utils.py:113 Helper function for generating a unique task id from an asyncio task.","title":"get_current_task_name"},{"location":"pyfirehose/utils/#signature_2","text":"def get_current_task_name () -> str : ...","title":"Signature"},{"location":"pyfirehose/utils/#import_all_from_module","text":"Show source in utils.py:122 Dynamically import all python files located in the specified module's folder.","title":"import_all_from_module"},{"location":"pyfirehose/utils/#arguments_2","text":"module_name - Name of the module to import files from.","title":"Arguments"},{"location":"pyfirehose/utils/#returns_2","text":"The list of imported modules.","title":"Returns"},{"location":"pyfirehose/utils/#signature_3","text":"def import_all_from_module ( module_name : str ) -> list [ ModuleType ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/","text":"Block Extractors Eos-blockchain-data Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules Modules Async Multi Channel Async Optimized Async Single Channel Common","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#block-extractors","text":"Eos-blockchain-data Index / Pyfirehose / Block Extractors Auto-generated documentation for pyfirehose.block_extractors module. Block Extractors Modules","title":"Block Extractors"},{"location":"pyfirehose/block_extractors/#modules","text":"Async Multi Channel Async Optimized Async Single Channel Common","title":"Modules"},{"location":"pyfirehose/block_extractors/async_multi_channel/","text":"Async Multi Channel Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main asyncio_main Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#async-multi-channel","text":"Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Multi Channel Auto-generated documentation for pyfirehose.block_extractors.async_multi_channel module. Async Multi Channel asyncio_main","title":"Async Multi Channel"},{"location":"pyfirehose/block_extractors/async_multi_channel/#asyncio_main","text":"Show source in async_multi_channel.py:32 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from multiple gRPC channels until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_multi_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_multi_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_multi_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_optimized/","text":"Async Optimized Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main asyncio_main Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#async-optimized","text":"Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Optimized Auto-generated documentation for pyfirehose.block_extractors.async_optimized module. Async Optimized asyncio_main","title":"Async Optimized"},{"location":"pyfirehose/block_extractors/async_optimized/#asyncio_main","text":"Show source in async_optimized.py:25 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a fixed amount of workers will be initially spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_optimized/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_optimized/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_optimized/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/async_single_channel/","text":"Async Single Channel Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main asyncio_main Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks. Arguments period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition). Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed. Signature async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#async-single-channel","text":"Eos-blockchain-data Index / Pyfirehose / Block Extractors / Async Single Channel Auto-generated documentation for pyfirehose.block_extractors.async_single_channel module. Async Single Channel asyncio_main","title":"Async Single Channel"},{"location":"pyfirehose/block_extractors/async_single_channel/#asyncio_main","text":"Show source in async_single_channel.py:28 Extract blocks from a gRPC channel as raw blocks for later processing. Using asynchronous directives, a number of workers will be periodically spawned to extract data from the gRPC channel until all blocks have been retrieved. The returned list can then be parsed for extracting relevant data from the blocks.","title":"asyncio_main"},{"location":"pyfirehose/block_extractors/async_single_channel/#arguments","text":"period_start - The first block number of the targeted period. period_end - The last block number of the targeted period. initial_tasks - The initial number of concurrent tasks to start for streaming blocks. workload - The number of blocks to extract for each task. auto_adjust_frequency - Enable the task spawner to auto adjust the task spawning frequency based on the tasks' average runtime. spawn_frequency - The sleep time (in seconds) for the spawner to wait before trying to spawn a new task. Will be overridden if auto_adjust_frequency is enabled. kwargs - Additional keyword arguments to pass to the gRPC request (must match .proto file definition).","title":"Arguments"},{"location":"pyfirehose/block_extractors/async_single_channel/#returns","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) that can later be processed.","title":"Returns"},{"location":"pyfirehose/block_extractors/async_single_channel/#signature","text":"async def asyncio_main ( period_start : int , period_end : int , initial_tasks : int = 25 , workload : int = 100 , auto_adjust_frequency : bool = False , spawn_frequency : float = 0.1 , ** kwargs ) -> list [ Message ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/","text":"Common Eos-blockchain-data Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks get_secure_channel Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors. Yields A grpc.aio.Channel as an asynchronous context manager. Signature @asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ... process_blocks Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream. Arguments raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block. Returns A list of parsed data in the format returned by the block processor. Signature def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ... stream_blocks Show source in common.py:65 Return raw blocks (or parsed data) for the subset period between start and end . Arguments start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream. Returns A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied. Raises BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number. Signature async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Optional [ Callable [[ Message ], dict ]] = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Common"},{"location":"pyfirehose/block_extractors/common/#common","text":"Eos-blockchain-data Index / Pyfirehose / Block Extractors / Common Auto-generated documentation for pyfirehose.block_extractors.common module. Common get_secure_channel process_blocks stream_blocks","title":"Common"},{"location":"pyfirehose/block_extractors/common/#get_secure_channel","text":"Show source in common.py:20 Instantiate a secure gRPC channel as an asynchronous context manager for use by block extractors.","title":"get_secure_channel"},{"location":"pyfirehose/block_extractors/common/#yields","text":"A grpc.aio.Channel as an asynchronous context manager.","title":"Yields"},{"location":"pyfirehose/block_extractors/common/#signature","text":"@asynccontextmanager async def get_secure_channel () -> Generator [ grpc . aio . Channel , None , None ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#process_blocks","text":"Show source in common.py:45 Parse data using the given block processor, feeding it previously extracted raw blocks from a gRPC stream.","title":"process_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments","text":"raw_blocks - A sequence of packed blocks (google.protobuf.any_pb2.Any objects) extracted from a gRPC stream. block_processor - A generator function extracting relevant data from a block.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns","text":"A list of parsed data in the format returned by the block processor.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#signature_1","text":"def process_blocks ( raw_blocks : Sequence [ Message ], block_processor : Callable [[ Message ], dict ] ) -> list [ dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_extractors/common/#stream_blocks","text":"Show source in common.py:65 Return raw blocks (or parsed data) for the subset period between start and end .","title":"stream_blocks"},{"location":"pyfirehose/block_extractors/common/#arguments_1","text":"start - The stream's starting block. end - The stream's ending block. secure_channel - The gRPC secure channel (SSL/TLS) to extract block from. block_processor - Optional block processor function for directly parsing raw blocks. The function will then return the parsed blocks instead. Discouraged as it might cause congestion issues for the gRPC channel if the block processing takes too long. Parsing the blocks after extraction allows for maximum throughput from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_extractors/common/#returns_1","text":"A list of raw blocks (google.protobuf.any_pb2.Any objects) or parsed data if a block processor is supplied.","title":"Returns"},{"location":"pyfirehose/block_extractors/common/#raises","text":"BlockStreamException - If an rpc error is encountered. Contains the start, end, and failed block number.","title":"Raises"},{"location":"pyfirehose/block_extractors/common/#signature_2","text":"async def stream_blocks ( start : int , end : int , secure_channel : grpc . aio . Channel , block_processor : Optional [ Callable [[ Message ], dict ]] = None , ** kwargs ) -> list [ Message | dict ]: ...","title":"Signature"},{"location":"pyfirehose/block_processors/","text":"Block Processors Eos-blockchain-data Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules Modules Processors","title":"Block Processors"},{"location":"pyfirehose/block_processors/#block-processors","text":"Eos-blockchain-data Index / Pyfirehose / Block Processors Auto-generated documentation for pyfirehose.block_processors module. Block Processors Modules","title":"Block Processors"},{"location":"pyfirehose/block_processors/#modules","text":"Processors","title":"Modules"},{"location":"pyfirehose/block_processors/processors/","text":"Processors Eos-blockchain-data Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_block_processor filtered_block_processor default_block_processor Show source in processors.py:61 Yield all the block data as a JSON-formatted dictionary. First unpacks the block and converts all its properties to JSON. Arguments raw_block - Raw block received from the gRPC stream. Yields A dictionary containing all the block's properties as defined in the proto files. Signature def default_block_processor ( raw_block : Message ) -> dict : ... filtered_block_processor Show source in processors.py:79 Yield a all transactions from a gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream. Arguments raw_block - Raw block received from the gRPC stream. Yields A dictionary containing the filtered block data. Examples { \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" } Signature def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#processors","text":"Eos-blockchain-data Index / Pyfirehose / Block Processors / Processors Auto-generated documentation for pyfirehose.block_processors.processors module. Processors default_block_processor filtered_block_processor","title":"Processors"},{"location":"pyfirehose/block_processors/processors/#default_block_processor","text":"Show source in processors.py:61 Yield all the block data as a JSON-formatted dictionary. First unpacks the block and converts all its properties to JSON.","title":"default_block_processor"},{"location":"pyfirehose/block_processors/processors/#arguments","text":"raw_block - Raw block received from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields","text":"A dictionary containing all the block's properties as defined in the proto files.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#signature","text":"def default_block_processor ( raw_block : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/block_processors/processors/#filtered_block_processor","text":"Show source in processors.py:79 Yield a all transactions from a gRPC filtered block, returning a subset of relevant properties. See the README.md file for more information on building filtered stream.","title":"filtered_block_processor"},{"location":"pyfirehose/block_processors/processors/#arguments_1","text":"raw_block - Raw block received from the gRPC stream.","title":"Arguments"},{"location":"pyfirehose/block_processors/processors/#yields_1","text":"A dictionary containing the filtered block data.","title":"Yields"},{"location":"pyfirehose/block_processors/processors/#examples","text":"{ \"account\" : \"eosio.bpay\" , \"date\" : \"2022-10-21 00:03:31\" , \"timestamp\" : 1666310611 , \"amount\" : \"344.5222\" , \"token\" : \"EOS\" , \"from\" : \"eosio.bpay\" , \"to\" : \"newdex.bp\" , \"block_num\" : 274268407 , \"transaction_id\" : \"353555074901da28cd6dd64b0b64e73f12fdc86a91c8ad5e25b68952979aeed0\" , \"memo\" : \"producer block pay\" , \"contract\" : \"eosio.token\" , \"action\" : \"transfer\" }","title":"Examples"},{"location":"pyfirehose/block_processors/processors/#signature_1","text":"def filtered_block_processor ( raw_block : Message ) -> dict : ...","title":"Signature"},{"location":"pyfirehose/tests/","text":"Tests Eos-blockchain-data Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"},{"location":"pyfirehose/tests/#tests","text":"Eos-blockchain-data Index / Pyfirehose / Tests Auto-generated documentation for pyfirehose.tests module. Tests","title":"Tests"}]}